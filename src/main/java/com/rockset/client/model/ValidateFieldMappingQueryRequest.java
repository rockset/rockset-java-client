/*
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rockset.client.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import java.util.Objects;

/** ValidateFieldMappingQueryRequest */
@javax.annotation.Generated(
    value = "io.swagger.codegen.languages.JavaClientCodegen",
    date = "2022-04-15T10:38:36.284-04:00")
public class ValidateFieldMappingQueryRequest {
  @SerializedName("sql")
  private String sql = null;

  @SerializedName("insert_only")
  private Boolean insertOnly = null;

  @SerializedName("updated_fields_cdc_only")
  private Boolean updatedFieldsCdcOnly = null;

  public ValidateFieldMappingQueryRequest sql(String sql) {
    this.sql = sql;
    return this;
  }

  /**
   * Field mapping query to be validated
   *
   * @return sql
   */
  @JsonProperty("sql")
  @ApiModelProperty(
      example = "SELECT * EXCEPT (name), SHA256(name) AS name_anon FROM _input",
      value = "Field mapping query to be validated")
  public String getSql() {
    return sql;
  }

  public void setSql(String sql) {
    this.sql = sql;
  }

  public ValidateFieldMappingQueryRequest insertOnly(Boolean insertOnly) {
    this.insertOnly = insertOnly;
    return this;
  }

  /**
   * is field mapping for an insert only collection
   *
   * @return insertOnly
   */
  @JsonProperty("insert_only")
  @ApiModelProperty(value = "is field mapping for an insert only collection")
  public Boolean isInsertOnly() {
    return insertOnly;
  }

  public void setInsertOnly(Boolean insertOnly) {
    this.insertOnly = insertOnly;
  }

  public ValidateFieldMappingQueryRequest updatedFieldsCdcOnly(Boolean updatedFieldsCdcOnly) {
    this.updatedFieldsCdcOnly = updatedFieldsCdcOnly;
    return this;
  }

  /**
   * does the CDC stream contain updated fields only
   *
   * @return updatedFieldsCdcOnly
   */
  @JsonProperty("updated_fields_cdc_only")
  @ApiModelProperty(value = "does the CDC stream contain updated fields only")
  public Boolean isUpdatedFieldsCdcOnly() {
    return updatedFieldsCdcOnly;
  }

  public void setUpdatedFieldsCdcOnly(Boolean updatedFieldsCdcOnly) {
    this.updatedFieldsCdcOnly = updatedFieldsCdcOnly;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidateFieldMappingQueryRequest validateFieldMappingQueryRequest =
        (ValidateFieldMappingQueryRequest) o;
    return Objects.equals(this.sql, validateFieldMappingQueryRequest.sql)
        && Objects.equals(this.insertOnly, validateFieldMappingQueryRequest.insertOnly)
        && Objects.equals(
            this.updatedFieldsCdcOnly, validateFieldMappingQueryRequest.updatedFieldsCdcOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sql, insertOnly, updatedFieldsCdcOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidateFieldMappingQueryRequest {\n");

    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    insertOnly: ").append(toIndentedString(insertOnly)).append("\n");
    sb.append("    updatedFieldsCdcOnly: ")
        .append(toIndentedString(updatedFieldsCdcOnly))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
