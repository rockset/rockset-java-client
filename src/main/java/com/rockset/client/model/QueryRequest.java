/*
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rockset.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.rockset.client.model.AsyncQueryOptions;
import com.rockset.client.model.QueryRequestSql;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * QueryRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-01-15T19:57:30.680Z")
public class QueryRequest {
  @SerializedName("async")
  private Boolean async = null;

  @SerializedName("async_options")
  private AsyncQueryOptions asyncOptions = null;

  @SerializedName("debug_threshold_ms")
  private Long debugThresholdMs = null;

  @SerializedName("max_initial_results")
  private Long maxInitialResults = null;

  @SerializedName("sql")
  private QueryRequestSql sql = null;

  @SerializedName("timeout_ms")
  private Long timeoutMs = null;

  public QueryRequest async(Boolean async) {
    this.async = async;
    return this;
  }

   /**
   * If true, the query will run asynchronously for up to 30 minutes. The query request will immediately return with a query id that can be used to retrieve the query status and results. If false or not specified, the query will return with results once completed or timeout after 2 minutes. (To return results directly for shorter queries while still allowing a timeout of up to 30 minutes, set &#x60;async_options.client_timeout_ms&#x60;.) 
   * @return async
  **/

@JsonProperty("async")
@ApiModelProperty(value = "If true, the query will run asynchronously for up to 30 minutes. The query request will immediately return with a query id that can be used to retrieve the query status and results. If false or not specified, the query will return with results once completed or timeout after 2 minutes. (To return results directly for shorter queries while still allowing a timeout of up to 30 minutes, set `async_options.client_timeout_ms`.) ")
  public Boolean isAsync() {
    return async;
  }

  public void setAsync(Boolean async) {
    this.async = async;
  }

  public QueryRequest asyncOptions(AsyncQueryOptions asyncOptions) {
    this.asyncOptions = asyncOptions;
    return this;
  }

   /**
   * Options for configuring Asynchronous Query Mode.
   * @return asyncOptions
  **/

@JsonProperty("async_options")
@ApiModelProperty(value = "Options for configuring Asynchronous Query Mode.")
  public AsyncQueryOptions getAsyncOptions() {
    return asyncOptions;
  }

  public void setAsyncOptions(AsyncQueryOptions asyncOptions) {
    this.asyncOptions = asyncOptions;
  }

  public QueryRequest debugThresholdMs(Long debugThresholdMs) {
    this.debugThresholdMs = debugThresholdMs;
    return this;
  }

   /**
   * If query execution takes longer than this value, debug information will be logged. If the query text includes the DEBUG hint and this parameter is also provided, only this value will be used and the DEBUG hint will be ignored.
   * @return debugThresholdMs
  **/

@JsonProperty("debug_threshold_ms")
@ApiModelProperty(value = "If query execution takes longer than this value, debug information will be logged. If the query text includes the DEBUG hint and this parameter is also provided, only this value will be used and the DEBUG hint will be ignored.")
  public Long getDebugThresholdMs() {
    return debugThresholdMs;
  }

  public void setDebugThresholdMs(Long debugThresholdMs) {
    this.debugThresholdMs = debugThresholdMs;
  }

  public QueryRequest maxInitialResults(Long maxInitialResults) {
    this.maxInitialResults = maxInitialResults;
    return this;
  }

   /**
   * This limits the maximum number of results in the initial response. A pagination cursor is returned if the number of results exceeds &#x60;max_initial_results&#x60;. If &#x60;max_initial_results&#x60; is not set, all results will be returned in the initial response up to 4 million. If &#x60;max_initial_results&#x60; is set, the value must be between 0 and 100,000. If the query is async and &#x60;client_timeout_ms&#x60; is exceeded, &#x60;max_initial_results&#x60; does not apply since none of the results will be returned with the initial response.
   * @return maxInitialResults
  **/

@JsonProperty("max_initial_results")
@ApiModelProperty(value = "This limits the maximum number of results in the initial response. A pagination cursor is returned if the number of results exceeds `max_initial_results`. If `max_initial_results` is not set, all results will be returned in the initial response up to 4 million. If `max_initial_results` is set, the value must be between 0 and 100,000. If the query is async and `client_timeout_ms` is exceeded, `max_initial_results` does not apply since none of the results will be returned with the initial response.")
  public Long getMaxInitialResults() {
    return maxInitialResults;
  }

  public void setMaxInitialResults(Long maxInitialResults) {
    this.maxInitialResults = maxInitialResults;
  }

  public QueryRequest sql(QueryRequestSql sql) {
    this.sql = sql;
    return this;
  }

   /**
   * Main query request body.
   * @return sql
  **/

@JsonProperty("sql")
@ApiModelProperty(required = true, value = "Main query request body.")
  public QueryRequestSql getSql() {
    return sql;
  }

  public void setSql(QueryRequestSql sql) {
    this.sql = sql;
  }

  public QueryRequest timeoutMs(Long timeoutMs) {
    this.timeoutMs = timeoutMs;
    return this;
  }

   /**
   * If a query exceeds the specified timeout, the query will automatically stop and return an error. The query timeout defaults to a maximum of 2 minutes. If &#x60;async&#x60; is true, the query timeout defaults to a maximum of 30 minutes.
   * @return timeoutMs
  **/

@JsonProperty("timeout_ms")
@ApiModelProperty(value = "If a query exceeds the specified timeout, the query will automatically stop and return an error. The query timeout defaults to a maximum of 2 minutes. If `async` is true, the query timeout defaults to a maximum of 30 minutes.")
  public Long getTimeoutMs() {
    return timeoutMs;
  }

  public void setTimeoutMs(Long timeoutMs) {
    this.timeoutMs = timeoutMs;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryRequest queryRequest = (QueryRequest) o;
    return Objects.equals(this.async, queryRequest.async) &&
        Objects.equals(this.asyncOptions, queryRequest.asyncOptions) &&
        Objects.equals(this.debugThresholdMs, queryRequest.debugThresholdMs) &&
        Objects.equals(this.maxInitialResults, queryRequest.maxInitialResults) &&
        Objects.equals(this.sql, queryRequest.sql) &&
        Objects.equals(this.timeoutMs, queryRequest.timeoutMs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(async, asyncOptions, debugThresholdMs, maxInitialResults, sql, timeoutMs);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryRequest {\n");
    
    sb.append("    async: ").append(toIndentedString(async)).append("\n");
    sb.append("    asyncOptions: ").append(toIndentedString(asyncOptions)).append("\n");
    sb.append("    debugThresholdMs: ").append(toIndentedString(debugThresholdMs)).append("\n");
    sb.append("    maxInitialResults: ").append(toIndentedString(maxInitialResults)).append("\n");
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    timeoutMs: ").append(toIndentedString(timeoutMs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

