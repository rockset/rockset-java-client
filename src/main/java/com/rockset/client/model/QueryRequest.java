/*
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rockset.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.rockset.client.model.AsyncQueryOptions;
import com.rockset.client.model.QueryRequestSql;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * QueryRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-11-22T11:16:43.952-05:00")
public class QueryRequest {
  @SerializedName("sql")
  private QueryRequestSql sql = null;

  @SerializedName("async_options")
  private AsyncQueryOptions asyncOptions = null;

  public QueryRequest sql(QueryRequestSql sql) {
    this.sql = sql;
    return this;
  }

   /**
   * Main query request body.
   * @return sql
  **/

@JsonProperty("sql")
@ApiModelProperty(required = true, value = "Main query request body.")
  public QueryRequestSql getSql() {
    return sql;
  }

  public void setSql(QueryRequestSql sql) {
    this.sql = sql;
  }

  public QueryRequest asyncOptions(AsyncQueryOptions asyncOptions) {
    this.asyncOptions = asyncOptions;
    return this;
  }

   /**
   * Options for configuring Asynchronous Query Mode (beta).
   * @return asyncOptions
  **/

@JsonProperty("async_options")
@ApiModelProperty(value = "Options for configuring Asynchronous Query Mode (beta).")
  public AsyncQueryOptions getAsyncOptions() {
    return asyncOptions;
  }

  public void setAsyncOptions(AsyncQueryOptions asyncOptions) {
    this.asyncOptions = asyncOptions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryRequest queryRequest = (QueryRequest) o;
    return Objects.equals(this.sql, queryRequest.sql) &&
        Objects.equals(this.asyncOptions, queryRequest.asyncOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sql, asyncOptions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryRequest {\n");
    
    sb.append("    sql: ").append(toIndentedString(sql)).append("\n");
    sb.append("    asyncOptions: ").append(toIndentedString(asyncOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

