/*
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rockset.client.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import java.util.Objects;

/** FormatParams */
@javax.annotation.Generated(
    value = "io.swagger.codegen.languages.JavaClientCodegen",
    date = "2021-12-09T15:56:21.038-08:00")
public class FormatParams {
  @SerializedName("json")
  private Boolean json = null;

  @SerializedName("csv")
  private CsvParams csv = null;

  @SerializedName("xml")
  private XmlParams xml = null;

  @SerializedName("mysql_dms")
  private Boolean mysqlDms = null;

  @SerializedName("postgres_dms")
  private Boolean postgresDms = null;

  public FormatParams json(Boolean json) {
    this.json = json;
    return this;
  }

  /**
   * source data is in json format
   *
   * @return json
   */
  @JsonProperty("json")
  @ApiModelProperty(example = "true", value = "source data is in json format")
  public Boolean isJson() {
    return json;
  }

  public void setJson(Boolean json) {
    this.json = json;
  }

  public FormatParams csv(CsvParams csv) {
    this.csv = csv;
    return this;
  }

  /**
   * Get csv
   *
   * @return csv
   */
  @JsonProperty("csv")
  @ApiModelProperty(value = "")
  public CsvParams getCsv() {
    return csv;
  }

  public void setCsv(CsvParams csv) {
    this.csv = csv;
  }

  public FormatParams xml(XmlParams xml) {
    this.xml = xml;
    return this;
  }

  /**
   * Get xml
   *
   * @return xml
   */
  @JsonProperty("xml")
  @ApiModelProperty(value = "")
  public XmlParams getXml() {
    return xml;
  }

  public void setXml(XmlParams xml) {
    this.xml = xml;
  }

  public FormatParams mysqlDms(Boolean mysqlDms) {
    this.mysqlDms = mysqlDms;
    return this;
  }

  /**
   * Get mysqlDms
   *
   * @return mysqlDms
   */
  @JsonProperty("mysql_dms")
  @ApiModelProperty(value = "")
  public Boolean isMysqlDms() {
    return mysqlDms;
  }

  public void setMysqlDms(Boolean mysqlDms) {
    this.mysqlDms = mysqlDms;
  }

  public FormatParams postgresDms(Boolean postgresDms) {
    this.postgresDms = postgresDms;
    return this;
  }

  /**
   * Get postgresDms
   *
   * @return postgresDms
   */
  @JsonProperty("postgres_dms")
  @ApiModelProperty(value = "")
  public Boolean isPostgresDms() {
    return postgresDms;
  }

  public void setPostgresDms(Boolean postgresDms) {
    this.postgresDms = postgresDms;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormatParams formatParams = (FormatParams) o;
    return Objects.equals(this.json, formatParams.json)
        && Objects.equals(this.csv, formatParams.csv)
        && Objects.equals(this.xml, formatParams.xml)
        && Objects.equals(this.mysqlDms, formatParams.mysqlDms)
        && Objects.equals(this.postgresDms, formatParams.postgresDms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(json, csv, xml, mysqlDms, postgresDms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormatParams {\n");

    sb.append("    json: ").append(toIndentedString(json)).append("\n");
    sb.append("    csv: ").append(toIndentedString(csv)).append("\n");
    sb.append("    xml: ").append(toIndentedString(xml)).append("\n");
    sb.append("    mysqlDms: ").append(toIndentedString(mysqlDms)).append("\n");
    sb.append("    postgresDms: ").append(toIndentedString(postgresDms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
