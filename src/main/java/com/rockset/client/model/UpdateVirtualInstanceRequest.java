/*
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rockset.client.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Objects;

/** UpdateVirtualInstanceRequest */
@javax.annotation.Generated(
    value = "io.swagger.codegen.languages.JavaClientCodegen",
    date = "2021-12-09T15:56:21.038-08:00")
public class UpdateVirtualInstanceRequest {
  /** requested virtual instance size */
  @JsonAdapter(NewSizeEnum.Adapter.class)
  public enum NewSizeEnum {
    FREE("FREE"),

    SHARED("SHARED"),

    SMALL("SMALL"),

    MEDIUM("MEDIUM"),

    LARGE("LARGE"),

    XLARGE("XLARGE"),

    XLARGE2("XLARGE2"),

    XLARGE4("XLARGE4"),

    XLARGE8("XLARGE8"),

    XLARGE16("XLARGE16");

    private String value;

    NewSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NewSizeEnum fromValue(String text) {
      for (NewSizeEnum b : NewSizeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<NewSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NewSizeEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NewSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NewSizeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("new_size")
  private NewSizeEnum newSize = null;

  /** Gets or Sets newType */
  @JsonAdapter(NewTypeEnum.Adapter.class)
  public enum NewTypeEnum {
    FREE("FREE"),

    SHARED("SHARED"),

    SMALL("SMALL"),

    MEDIUM("MEDIUM"),

    LARGE("LARGE"),

    XLARGE("XLARGE"),

    XLARGE2("XLARGE2"),

    XLARGE4("XLARGE4"),

    XLARGE8("XLARGE8"),

    XLARGE16("XLARGE16");

    private String value;

    NewTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NewTypeEnum fromValue(String text) {
      for (NewTypeEnum b : NewTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<NewTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NewTypeEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NewTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return NewTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("new_type")
  private NewTypeEnum newType = null;

  @SerializedName("monitoring_enabled")
  private Boolean monitoringEnabled = null;

  public UpdateVirtualInstanceRequest newSize(NewSizeEnum newSize) {
    this.newSize = newSize;
    return this;
  }

  /**
   * requested virtual instance size
   *
   * @return newSize
   */
  @JsonProperty("new_size")
  @ApiModelProperty(example = "LARGE", value = "requested virtual instance size")
  public NewSizeEnum getNewSize() {
    return newSize;
  }

  public void setNewSize(NewSizeEnum newSize) {
    this.newSize = newSize;
  }

  public UpdateVirtualInstanceRequest newType(NewTypeEnum newType) {
    this.newType = newType;
    return this;
  }

  /**
   * Get newType
   *
   * @return newType
   */
  @JsonProperty("new_type")
  @ApiModelProperty(value = "")
  public NewTypeEnum getNewType() {
    return newType;
  }

  public void setNewType(NewTypeEnum newType) {
    this.newType = newType;
  }

  public UpdateVirtualInstanceRequest monitoringEnabled(Boolean monitoringEnabled) {
    this.monitoringEnabled = monitoringEnabled;
    return this;
  }

  /**
   * Get monitoringEnabled
   *
   * @return monitoringEnabled
   */
  @JsonProperty("monitoring_enabled")
  @ApiModelProperty(value = "")
  public Boolean isMonitoringEnabled() {
    return monitoringEnabled;
  }

  public void setMonitoringEnabled(Boolean monitoringEnabled) {
    this.monitoringEnabled = monitoringEnabled;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateVirtualInstanceRequest updateVirtualInstanceRequest = (UpdateVirtualInstanceRequest) o;
    return Objects.equals(this.newSize, updateVirtualInstanceRequest.newSize)
        && Objects.equals(this.newType, updateVirtualInstanceRequest.newType)
        && Objects.equals(this.monitoringEnabled, updateVirtualInstanceRequest.monitoringEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(newSize, newType, monitoringEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateVirtualInstanceRequest {\n");

    sb.append("    newSize: ").append(toIndentedString(newSize)).append("\n");
    sb.append("    newType: ").append(toIndentedString(newType)).append("\n");
    sb.append("    monitoringEnabled: ").append(toIndentedString(monitoringEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
