/*
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rockset.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * AutoScalingPolicy
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2024-01-15T19:57:30.680Z")
public class AutoScalingPolicy {
  @SerializedName("enabled")
  private Boolean enabled = null;

  /**
   * Maximum size Rockset can auto scale the Virtual Instance to. This value should be one of the dedicated sizes greater than or same as the min_size and lower than or same as the current size.
   */
  @JsonAdapter(MaxSizeEnum.Adapter.class)
  public enum MaxSizeEnum {
    FREE("FREE"),
    
    NANO("NANO"),
    
    SHARED("SHARED"),
    
    MILLI("MILLI"),
    
    XSMALL("XSMALL"),
    
    SMALL("SMALL"),
    
    MEDIUM("MEDIUM"),
    
    LARGE("LARGE"),
    
    XLARGE("XLARGE"),
    
    XLARGE2("XLARGE2"),
    
    XLARGE4("XLARGE4"),
    
    XLARGE8("XLARGE8"),
    
    XLARGE16("XLARGE16");

    private String value;

    MaxSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @com.fasterxml.jackson.annotation.JsonCreator
    public static MaxSizeEnum fromValue(String text) {
      for (MaxSizeEnum b : MaxSizeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MaxSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaxSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaxSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MaxSizeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("max_size")
  private MaxSizeEnum maxSize = null;

  /**
   * Minimum size Rockset can auto scale the Virtual Instance to. This value should be one of the dedicated sizes lower than or same as the max_size and greater than or same as the current size.
   */
  @JsonAdapter(MinSizeEnum.Adapter.class)
  public enum MinSizeEnum {
    FREE("FREE"),
    
    NANO("NANO"),
    
    SHARED("SHARED"),
    
    MILLI("MILLI"),
    
    XSMALL("XSMALL"),
    
    SMALL("SMALL"),
    
    MEDIUM("MEDIUM"),
    
    LARGE("LARGE"),
    
    XLARGE("XLARGE"),
    
    XLARGE2("XLARGE2"),
    
    XLARGE4("XLARGE4"),
    
    XLARGE8("XLARGE8"),
    
    XLARGE16("XLARGE16");

    private String value;

    MinSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @com.fasterxml.jackson.annotation.JsonCreator
    public static MinSizeEnum fromValue(String text) {
      for (MinSizeEnum b : MinSizeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MinSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MinSizeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("min_size")
  private MinSizeEnum minSize = null;

  public AutoScalingPolicy enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether auto scaling policy is enabled.
   * @return enabled
  **/

@JsonProperty("enabled")
@ApiModelProperty(example = "true", value = "Whether auto scaling policy is enabled.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public AutoScalingPolicy maxSize(MaxSizeEnum maxSize) {
    this.maxSize = maxSize;
    return this;
  }

   /**
   * Maximum size Rockset can auto scale the Virtual Instance to. This value should be one of the dedicated sizes greater than or same as the min_size and lower than or same as the current size.
   * @return maxSize
  **/

@JsonProperty("max_size")
@ApiModelProperty(example = "XLARGE2", value = "Maximum size Rockset can auto scale the Virtual Instance to. This value should be one of the dedicated sizes greater than or same as the min_size and lower than or same as the current size.")
  public MaxSizeEnum getMaxSize() {
    return maxSize;
  }

  public void setMaxSize(MaxSizeEnum maxSize) {
    this.maxSize = maxSize;
  }

  public AutoScalingPolicy minSize(MinSizeEnum minSize) {
    this.minSize = minSize;
    return this;
  }

   /**
   * Minimum size Rockset can auto scale the Virtual Instance to. This value should be one of the dedicated sizes lower than or same as the max_size and greater than or same as the current size.
   * @return minSize
  **/

@JsonProperty("min_size")
@ApiModelProperty(example = "LARGE", value = "Minimum size Rockset can auto scale the Virtual Instance to. This value should be one of the dedicated sizes lower than or same as the max_size and greater than or same as the current size.")
  public MinSizeEnum getMinSize() {
    return minSize;
  }

  public void setMinSize(MinSizeEnum minSize) {
    this.minSize = minSize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutoScalingPolicy autoScalingPolicy = (AutoScalingPolicy) o;
    return Objects.equals(this.enabled, autoScalingPolicy.enabled) &&
        Objects.equals(this.maxSize, autoScalingPolicy.maxSize) &&
        Objects.equals(this.minSize, autoScalingPolicy.minSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, maxSize, minSize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutoScalingPolicy {\n");
    
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    maxSize: ").append(toIndentedString(maxSize)).append("\n");
    sb.append("    minSize: ").append(toIndentedString(minSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

