/*
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rockset.client.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** CreateCollectionRequest */
@javax.annotation.Generated(
    value = "io.swagger.codegen.languages.JavaClientCodegen",
    date = "2021-12-09T15:56:21.038-08:00")
public class CreateCollectionRequest {
  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("sources")
  private List<Source> sources = null;

  @SerializedName("retention_secs")
  private Long retentionSecs = null;

  @SerializedName("time_partition_resolution_secs")
  private Long timePartitionResolutionSecs = null;

  @SerializedName("insert_only")
  private Boolean insertOnly = null;

  @SerializedName("event_time_info")
  private EventTimeInfo eventTimeInfo = null;

  @SerializedName("field_mappings")
  private List<FieldMappingV2> fieldMappings = null;

  @SerializedName("field_mapping_query")
  private FieldMappingQuery fieldMappingQuery = null;

  @SerializedName("clustering_key")
  private List<FieldPartition> clusteringKey = null;

  @SerializedName("field_schemas")
  private List<FieldSchema> fieldSchemas = null;

  @SerializedName("inverted_index_group_encoding_options")
  private InvertedIndexGroupEncodingOptions invertedIndexGroupEncodingOptions = null;

  public CreateCollectionRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * unique identifier for collection, can contain alphanumeric or dash characters
   *
   * @return name
   */
  @JsonProperty("name")
  @ApiModelProperty(
      example = "global-transactions",
      required = true,
      value = "unique identifier for collection, can contain alphanumeric or dash characters")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CreateCollectionRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * text describing the collection
   *
   * @return description
   */
  @JsonProperty("description")
  @ApiModelProperty(
      example = "transactions from stores worldwide",
      value = "text describing the collection")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CreateCollectionRequest sources(List<Source> sources) {
    this.sources = sources;
    return this;
  }

  public CreateCollectionRequest addSourcesItem(Source sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<Source>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * list of sources from which to ingest data
   *
   * @return sources
   */
  @JsonProperty("sources")
  @ApiModelProperty(value = "list of sources from which to ingest data")
  public List<Source> getSources() {
    return sources;
  }

  public void setSources(List<Source> sources) {
    this.sources = sources;
  }

  public CreateCollectionRequest retentionSecs(Long retentionSecs) {
    this.retentionSecs = retentionSecs;
    return this;
  }

  /**
   * number of seconds after which data is purged, based on event time
   *
   * @return retentionSecs
   */
  @JsonProperty("retention_secs")
  @ApiModelProperty(
      example = "1000000",
      value = "number of seconds after which data is purged, based on event time")
  public Long getRetentionSecs() {
    return retentionSecs;
  }

  public void setRetentionSecs(Long retentionSecs) {
    this.retentionSecs = retentionSecs;
  }

  public CreateCollectionRequest timePartitionResolutionSecs(Long timePartitionResolutionSecs) {
    this.timePartitionResolutionSecs = timePartitionResolutionSecs;
    return this;
  }

  /**
   * If non-null, the collection will be time partitioned and each partition will be
   * time_partition_resolution_secs wide.
   *
   * @return timePartitionResolutionSecs
   */
  @JsonProperty("time_partition_resolution_secs")
  @ApiModelProperty(
      value =
          "If non-null, the collection will be time partitioned and each partition will be time_partition_resolution_secs wide.")
  public Long getTimePartitionResolutionSecs() {
    return timePartitionResolutionSecs;
  }

  public void setTimePartitionResolutionSecs(Long timePartitionResolutionSecs) {
    this.timePartitionResolutionSecs = timePartitionResolutionSecs;
  }

  public CreateCollectionRequest insertOnly(Boolean insertOnly) {
    this.insertOnly = insertOnly;
    return this;
  }

  /**
   * If true disallows updates and deletes, but makes indexing more efficient
   *
   * @return insertOnly
   */
  @JsonProperty("insert_only")
  @ApiModelProperty(
      value = "If true disallows updates and deletes, but makes indexing more efficient")
  public Boolean isInsertOnly() {
    return insertOnly;
  }

  public void setInsertOnly(Boolean insertOnly) {
    this.insertOnly = insertOnly;
  }

  public CreateCollectionRequest eventTimeInfo(EventTimeInfo eventTimeInfo) {
    this.eventTimeInfo = eventTimeInfo;
    return this;
  }

  /**
   * configuration for event data
   *
   * @return eventTimeInfo
   */
  @JsonProperty("event_time_info")
  @ApiModelProperty(value = "configuration for event data")
  public EventTimeInfo getEventTimeInfo() {
    return eventTimeInfo;
  }

  public void setEventTimeInfo(EventTimeInfo eventTimeInfo) {
    this.eventTimeInfo = eventTimeInfo;
  }

  public CreateCollectionRequest fieldMappings(List<FieldMappingV2> fieldMappings) {
    this.fieldMappings = fieldMappings;
    return this;
  }

  public CreateCollectionRequest addFieldMappingsItem(FieldMappingV2 fieldMappingsItem) {
    if (this.fieldMappings == null) {
      this.fieldMappings = new ArrayList<FieldMappingV2>();
    }
    this.fieldMappings.add(fieldMappingsItem);
    return this;
  }

  /**
   * list of mappings
   *
   * @return fieldMappings
   */
  @JsonProperty("field_mappings")
  @ApiModelProperty(value = "list of mappings")
  public List<FieldMappingV2> getFieldMappings() {
    return fieldMappings;
  }

  public void setFieldMappings(List<FieldMappingV2> fieldMappings) {
    this.fieldMappings = fieldMappings;
  }

  public CreateCollectionRequest fieldMappingQuery(FieldMappingQuery fieldMappingQuery) {
    this.fieldMappingQuery = fieldMappingQuery;
    return this;
  }

  /**
   * Mapping of fields for a collection
   *
   * @return fieldMappingQuery
   */
  @JsonProperty("field_mapping_query")
  @ApiModelProperty(value = "Mapping of fields for a collection")
  public FieldMappingQuery getFieldMappingQuery() {
    return fieldMappingQuery;
  }

  public void setFieldMappingQuery(FieldMappingQuery fieldMappingQuery) {
    this.fieldMappingQuery = fieldMappingQuery;
  }

  public CreateCollectionRequest clusteringKey(List<FieldPartition> clusteringKey) {
    this.clusteringKey = clusteringKey;
    return this;
  }

  public CreateCollectionRequest addClusteringKeyItem(FieldPartition clusteringKeyItem) {
    if (this.clusteringKey == null) {
      this.clusteringKey = new ArrayList<FieldPartition>();
    }
    this.clusteringKey.add(clusteringKeyItem);
    return this;
  }

  /**
   * list of clustering fields
   *
   * @return clusteringKey
   */
  @JsonProperty("clustering_key")
  @ApiModelProperty(value = "list of clustering fields")
  public List<FieldPartition> getClusteringKey() {
    return clusteringKey;
  }

  public void setClusteringKey(List<FieldPartition> clusteringKey) {
    this.clusteringKey = clusteringKey;
  }

  public CreateCollectionRequest fieldSchemas(List<FieldSchema> fieldSchemas) {
    this.fieldSchemas = fieldSchemas;
    return this;
  }

  public CreateCollectionRequest addFieldSchemasItem(FieldSchema fieldSchemasItem) {
    if (this.fieldSchemas == null) {
      this.fieldSchemas = new ArrayList<FieldSchema>();
    }
    this.fieldSchemas.add(fieldSchemasItem);
    return this;
  }

  /**
   * list of field schemas
   *
   * @return fieldSchemas
   */
  @JsonProperty("field_schemas")
  @ApiModelProperty(value = "list of field schemas")
  public List<FieldSchema> getFieldSchemas() {
    return fieldSchemas;
  }

  public void setFieldSchemas(List<FieldSchema> fieldSchemas) {
    this.fieldSchemas = fieldSchemas;
  }

  public CreateCollectionRequest invertedIndexGroupEncodingOptions(
      InvertedIndexGroupEncodingOptions invertedIndexGroupEncodingOptions) {
    this.invertedIndexGroupEncodingOptions = invertedIndexGroupEncodingOptions;
    return this;
  }

  /**
   * inverted index group encoding options
   *
   * @return invertedIndexGroupEncodingOptions
   */
  @JsonProperty("inverted_index_group_encoding_options")
  @ApiModelProperty(value = "inverted index group encoding options")
  public InvertedIndexGroupEncodingOptions getInvertedIndexGroupEncodingOptions() {
    return invertedIndexGroupEncodingOptions;
  }

  public void setInvertedIndexGroupEncodingOptions(
      InvertedIndexGroupEncodingOptions invertedIndexGroupEncodingOptions) {
    this.invertedIndexGroupEncodingOptions = invertedIndexGroupEncodingOptions;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCollectionRequest createCollectionRequest = (CreateCollectionRequest) o;
    return Objects.equals(this.name, createCollectionRequest.name)
        && Objects.equals(this.description, createCollectionRequest.description)
        && Objects.equals(this.sources, createCollectionRequest.sources)
        && Objects.equals(this.retentionSecs, createCollectionRequest.retentionSecs)
        && Objects.equals(
            this.timePartitionResolutionSecs, createCollectionRequest.timePartitionResolutionSecs)
        && Objects.equals(this.insertOnly, createCollectionRequest.insertOnly)
        && Objects.equals(this.eventTimeInfo, createCollectionRequest.eventTimeInfo)
        && Objects.equals(this.fieldMappings, createCollectionRequest.fieldMappings)
        && Objects.equals(this.fieldMappingQuery, createCollectionRequest.fieldMappingQuery)
        && Objects.equals(this.clusteringKey, createCollectionRequest.clusteringKey)
        && Objects.equals(this.fieldSchemas, createCollectionRequest.fieldSchemas)
        && Objects.equals(
            this.invertedIndexGroupEncodingOptions,
            createCollectionRequest.invertedIndexGroupEncodingOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        name,
        description,
        sources,
        retentionSecs,
        timePartitionResolutionSecs,
        insertOnly,
        eventTimeInfo,
        fieldMappings,
        fieldMappingQuery,
        clusteringKey,
        fieldSchemas,
        invertedIndexGroupEncodingOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCollectionRequest {\n");

    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    retentionSecs: ").append(toIndentedString(retentionSecs)).append("\n");
    sb.append("    timePartitionResolutionSecs: ")
        .append(toIndentedString(timePartitionResolutionSecs))
        .append("\n");
    sb.append("    insertOnly: ").append(toIndentedString(insertOnly)).append("\n");
    sb.append("    eventTimeInfo: ").append(toIndentedString(eventTimeInfo)).append("\n");
    sb.append("    fieldMappings: ").append(toIndentedString(fieldMappings)).append("\n");
    sb.append("    fieldMappingQuery: ").append(toIndentedString(fieldMappingQuery)).append("\n");
    sb.append("    clusteringKey: ").append(toIndentedString(clusteringKey)).append("\n");
    sb.append("    fieldSchemas: ").append(toIndentedString(fieldSchemas)).append("\n");
    sb.append("    invertedIndexGroupEncodingOptions: ")
        .append(toIndentedString(invertedIndexGroupEncodingOptions))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
