/*
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rockset.client.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Objects;

/**
 * API keys are used to authenticate requests to Rockset&#39;s API. An API key is tied to the user
 * who creates it.
 */
@ApiModel(
    description =
        "API keys are used to authenticate requests to Rockset's API. An API key is tied to the user who creates it.")
@javax.annotation.Generated(
    value = "io.swagger.codegen.languages.JavaClientCodegen",
    date = "2021-12-09T15:56:21.038-08:00")
public class ApiKey {
  @SerializedName("created_at")
  private String createdAt = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("key")
  private String key = null;

  @SerializedName("last_access_time")
  private String lastAccessTime = null;

  @SerializedName("role")
  private String role = null;

  @SerializedName("created_by")
  private String createdBy = null;

  /** current state of this key */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("ACTIVE"),

    SUSPENDED("SUSPENDED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  public ApiKey createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date that API key was created (ISO-8601 format).
   *
   * @return createdAt
   */
  @JsonProperty("created_at")
  @ApiModelProperty(
      example = "2001-08-28T00:23:41Z",
      value = "Date that API key was created (ISO-8601 format).")
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public ApiKey name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the API key.
   *
   * @return name
   */
  @JsonProperty("name")
  @ApiModelProperty(example = "my-key", required = true, value = "Name of the API key.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ApiKey key(String key) {
    this.key = key;
    return this;
  }

  /**
   * API key string of 64 alphanumeric characters.
   *
   * @return key
   */
  @JsonProperty("key")
  @ApiModelProperty(
      example = "aB35kDjg*******************************",
      required = true,
      value = "API key string of 64 alphanumeric characters.")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public ApiKey lastAccessTime(String lastAccessTime) {
    this.lastAccessTime = lastAccessTime;
    return this;
  }

  /**
   * Date that API key was most recently used (ISO-8601 format).
   *
   * @return lastAccessTime
   */
  @JsonProperty("last_access_time")
  @ApiModelProperty(
      example = "2001-08-28T00:23:41Z",
      value = "Date that API key was most recently used (ISO-8601 format).")
  public String getLastAccessTime() {
    return lastAccessTime;
  }

  public void setLastAccessTime(String lastAccessTime) {
    this.lastAccessTime = lastAccessTime;
  }

  public ApiKey role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   *
   * @return role
   */
  @JsonProperty("role")
  @ApiModelProperty(value = "")
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }

  public ApiKey createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Email of API key owner.
   *
   * @return createdBy
   */
  @JsonProperty("created_by")
  @ApiModelProperty(example = "test@example.com", value = "Email of API key owner.")
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }

  public ApiKey state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * current state of this key
   *
   * @return state
   */
  @JsonProperty("state")
  @ApiModelProperty(example = "ACTIVE", value = "current state of this key")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiKey apiKey = (ApiKey) o;
    return Objects.equals(this.createdAt, apiKey.createdAt)
        && Objects.equals(this.name, apiKey.name)
        && Objects.equals(this.key, apiKey.key)
        && Objects.equals(this.lastAccessTime, apiKey.lastAccessTime)
        && Objects.equals(this.role, apiKey.role)
        && Objects.equals(this.createdBy, apiKey.createdBy)
        && Objects.equals(this.state, apiKey.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, name, key, lastAccessTime, role, createdBy, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiKey {\n");

    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    lastAccessTime: ").append(toIndentedString(lastAccessTime)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
