/*
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rockset.client.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Objects;

/** VirtualInstance */
@javax.annotation.Generated(
    value = "io.swagger.codegen.languages.JavaClientCodegen",
    date = "2021-12-09T15:56:21.038-08:00")
public class VirtualInstance {
  /** virtual instance state */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    PROVISIONING_RESOURCES("PROVISIONINGRESOURCES"),

    REBALANCING_COLLECTIONS("REBALANCINGCOLLECTIONS"),

    ACTIVE("ACTIVE"),

    DELETED("DELETED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  /** Gets or Sets currentType */
  @JsonAdapter(CurrentTypeEnum.Adapter.class)
  public enum CurrentTypeEnum {
    FREE("FREE"),

    SHARED("SHARED"),

    SMALL("SMALL"),

    MEDIUM("MEDIUM"),

    LARGE("LARGE"),

    XLARGE("XLARGE"),

    XLARGE2("XLARGE2"),

    XLARGE4("XLARGE4"),

    XLARGE8("XLARGE8"),

    XLARGE16("XLARGE16");

    private String value;

    CurrentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrentTypeEnum fromValue(String text) {
      for (CurrentTypeEnum b : CurrentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CurrentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrentTypeEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CurrentTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("current_type")
  private CurrentTypeEnum currentType = null;

  /** Gets or Sets desiredType */
  @JsonAdapter(DesiredTypeEnum.Adapter.class)
  public enum DesiredTypeEnum {
    FREE("FREE"),

    SHARED("SHARED"),

    SMALL("SMALL"),

    MEDIUM("MEDIUM"),

    LARGE("LARGE"),

    XLARGE("XLARGE"),

    XLARGE2("XLARGE2"),

    XLARGE4("XLARGE4"),

    XLARGE8("XLARGE8"),

    XLARGE16("XLARGE16");

    private String value;

    DesiredTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DesiredTypeEnum fromValue(String text) {
      for (DesiredTypeEnum b : DesiredTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DesiredTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DesiredTypeEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DesiredTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DesiredTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("desired_type")
  private DesiredTypeEnum desiredType = null;

  /** virtual instance current size */
  @JsonAdapter(CurrentSizeEnum.Adapter.class)
  public enum CurrentSizeEnum {
    FREE("FREE"),

    SHARED("SHARED"),

    SMALL("SMALL"),

    MEDIUM("MEDIUM"),

    LARGE("LARGE"),

    XLARGE("XLARGE"),

    XLARGE2("XLARGE2"),

    XLARGE4("XLARGE4"),

    XLARGE8("XLARGE8"),

    XLARGE16("XLARGE16");

    private String value;

    CurrentSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrentSizeEnum fromValue(String text) {
      for (CurrentSizeEnum b : CurrentSizeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CurrentSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrentSizeEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrentSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CurrentSizeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("current_size")
  private CurrentSizeEnum currentSize = null;

  /** virtual instance desired size */
  @JsonAdapter(DesiredSizeEnum.Adapter.class)
  public enum DesiredSizeEnum {
    FREE("FREE"),

    SHARED("SHARED"),

    SMALL("SMALL"),

    MEDIUM("MEDIUM"),

    LARGE("LARGE"),

    XLARGE("XLARGE"),

    XLARGE2("XLARGE2"),

    XLARGE4("XLARGE4"),

    XLARGE8("XLARGE8"),

    XLARGE16("XLARGE16");

    private String value;

    DesiredSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DesiredSizeEnum fromValue(String text) {
      for (DesiredSizeEnum b : DesiredSizeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DesiredSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DesiredSizeEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DesiredSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DesiredSizeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("desired_size")
  private DesiredSizeEnum desiredSize = null;

  @SerializedName("last_updated")
  private String lastUpdated = null;

  @SerializedName("estimated_switch_duration_minutes")
  private Long estimatedSwitchDurationMinutes = null;

  @SerializedName("monitoring_enabled")
  private Boolean monitoringEnabled = null;

  @SerializedName("default_pod_count")
  private Integer defaultPodCount = null;

  @SerializedName("scaled_pod_count")
  private Integer scaledPodCount = null;

  @SerializedName("id")
  private String id = null;

  public VirtualInstance state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * virtual instance state
   *
   * @return state
   */
  @JsonProperty("state")
  @ApiModelProperty(example = "ACTIVE", value = "virtual instance state")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public VirtualInstance currentType(CurrentTypeEnum currentType) {
    this.currentType = currentType;
    return this;
  }

  /**
   * Get currentType
   *
   * @return currentType
   */
  @JsonProperty("current_type")
  @ApiModelProperty(value = "")
  public CurrentTypeEnum getCurrentType() {
    return currentType;
  }

  public void setCurrentType(CurrentTypeEnum currentType) {
    this.currentType = currentType;
  }

  public VirtualInstance desiredType(DesiredTypeEnum desiredType) {
    this.desiredType = desiredType;
    return this;
  }

  /**
   * Get desiredType
   *
   * @return desiredType
   */
  @JsonProperty("desired_type")
  @ApiModelProperty(value = "")
  public DesiredTypeEnum getDesiredType() {
    return desiredType;
  }

  public void setDesiredType(DesiredTypeEnum desiredType) {
    this.desiredType = desiredType;
  }

  /**
   * virtual instance current size
   *
   * @return currentSize
   */
  @JsonProperty("current_size")
  @ApiModelProperty(example = "MEDIUM", value = "virtual instance current size")
  public CurrentSizeEnum getCurrentSize() {
    return currentSize;
  }

  /**
   * virtual instance desired size
   *
   * @return desiredSize
   */
  @JsonProperty("desired_size")
  @ApiModelProperty(example = "MEDIUM", value = "virtual instance desired size")
  public DesiredSizeEnum getDesiredSize() {
    return desiredSize;
  }

  public VirtualInstance lastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * ISO-8601 date of when virtual instance size was last updated
   *
   * @return lastUpdated
   */
  @JsonProperty("last_updated")
  @ApiModelProperty(
      example = "2001-08-28T00:23:41Z",
      value = "ISO-8601 date of when virtual instance size was last updated")
  public String getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
  }

  public VirtualInstance estimatedSwitchDurationMinutes(Long estimatedSwitchDurationMinutes) {
    this.estimatedSwitchDurationMinutes = estimatedSwitchDurationMinutes;
    return this;
  }

  /**
   * estimated duration in minutes of last virtual instance size update
   *
   * @return estimatedSwitchDurationMinutes
   */
  @JsonProperty("estimated_switch_duration_minutes")
  @ApiModelProperty(
      example = "20",
      value = "estimated duration in minutes of last virtual instance size update")
  public Long getEstimatedSwitchDurationMinutes() {
    return estimatedSwitchDurationMinutes;
  }

  public void setEstimatedSwitchDurationMinutes(Long estimatedSwitchDurationMinutes) {
    this.estimatedSwitchDurationMinutes = estimatedSwitchDurationMinutes;
  }

  public VirtualInstance monitoringEnabled(Boolean monitoringEnabled) {
    this.monitoringEnabled = monitoringEnabled;
    return this;
  }

  /**
   * Get monitoringEnabled
   *
   * @return monitoringEnabled
   */
  @JsonProperty("monitoring_enabled")
  @ApiModelProperty(value = "")
  public Boolean isMonitoringEnabled() {
    return monitoringEnabled;
  }

  public void setMonitoringEnabled(Boolean monitoringEnabled) {
    this.monitoringEnabled = monitoringEnabled;
  }

  public VirtualInstance defaultPodCount(Integer defaultPodCount) {
    this.defaultPodCount = defaultPodCount;
    return this;
  }

  /**
   * Get defaultPodCount
   *
   * @return defaultPodCount
   */
  @JsonProperty("default_pod_count")
  @ApiModelProperty(value = "")
  public Integer getDefaultPodCount() {
    return defaultPodCount;
  }

  public void setDefaultPodCount(Integer defaultPodCount) {
    this.defaultPodCount = defaultPodCount;
  }

  public VirtualInstance scaledPodCount(Integer scaledPodCount) {
    this.scaledPodCount = scaledPodCount;
    return this;
  }

  /**
   * Get scaledPodCount
   *
   * @return scaledPodCount
   */
  @JsonProperty("scaled_pod_count")
  @ApiModelProperty(value = "")
  public Integer getScaledPodCount() {
    return scaledPodCount;
  }

  public void setScaledPodCount(Integer scaledPodCount) {
    this.scaledPodCount = scaledPodCount;
  }

  public VirtualInstance id(String id) {
    this.id = id;
    return this;
  }

  /**
   * unique identifier for virtual instance
   *
   * @return id
   */
  @JsonProperty("id")
  @ApiModelProperty(
      example = "123e4567-e89b-12d3-a456-556642440000",
      value = "unique identifier for virtual instance")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualInstance virtualInstance = (VirtualInstance) o;
    return Objects.equals(this.state, virtualInstance.state)
        && Objects.equals(this.currentType, virtualInstance.currentType)
        && Objects.equals(this.desiredType, virtualInstance.desiredType)
        && Objects.equals(this.currentSize, virtualInstance.currentSize)
        && Objects.equals(this.desiredSize, virtualInstance.desiredSize)
        && Objects.equals(this.lastUpdated, virtualInstance.lastUpdated)
        && Objects.equals(
            this.estimatedSwitchDurationMinutes, virtualInstance.estimatedSwitchDurationMinutes)
        && Objects.equals(this.monitoringEnabled, virtualInstance.monitoringEnabled)
        && Objects.equals(this.defaultPodCount, virtualInstance.defaultPodCount)
        && Objects.equals(this.scaledPodCount, virtualInstance.scaledPodCount)
        && Objects.equals(this.id, virtualInstance.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        state,
        currentType,
        desiredType,
        currentSize,
        desiredSize,
        lastUpdated,
        estimatedSwitchDurationMinutes,
        monitoringEnabled,
        defaultPodCount,
        scaledPodCount,
        id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualInstance {\n");

    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    currentType: ").append(toIndentedString(currentType)).append("\n");
    sb.append("    desiredType: ").append(toIndentedString(desiredType)).append("\n");
    sb.append("    currentSize: ").append(toIndentedString(currentSize)).append("\n");
    sb.append("    desiredSize: ").append(toIndentedString(desiredSize)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    estimatedSwitchDurationMinutes: ")
        .append(toIndentedString(estimatedSwitchDurationMinutes))
        .append("\n");
    sb.append("    monitoringEnabled: ").append(toIndentedString(monitoringEnabled)).append("\n");
    sb.append("    defaultPodCount: ").append(toIndentedString(defaultPodCount)).append("\n");
    sb.append("    scaledPodCount: ").append(toIndentedString(scaledPodCount)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
