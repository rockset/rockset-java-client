/*
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rockset.client.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import java.util.Objects;

/** FieldOptions */
@javax.annotation.Generated(
    value = "io.swagger.codegen.languages.JavaClientCodegen",
    date = "2021-12-09T15:56:21.038-08:00")
public class FieldOptions {
  @SerializedName("index_mode")
  private String indexMode = null;

  @SerializedName("range_index_mode")
  private String rangeIndexMode = null;

  @SerializedName("type_index_mode")
  private String typeIndexMode = null;

  @SerializedName("column_index_mode")
  private String columnIndexMode = null;

  public FieldOptions indexMode(String indexMode) {
    this.indexMode = indexMode;
    return this;
  }

  /**
   * index or no_index
   *
   * @return indexMode
   */
  @JsonProperty("index_mode")
  @ApiModelProperty(example = "index", value = " index or no_index")
  public String getIndexMode() {
    return indexMode;
  }

  public void setIndexMode(String indexMode) {
    this.indexMode = indexMode;
  }

  public FieldOptions rangeIndexMode(String rangeIndexMode) {
    this.rangeIndexMode = rangeIndexMode;
    return this;
  }

  /**
   * v1_index or no_index
   *
   * @return rangeIndexMode
   */
  @JsonProperty("range_index_mode")
  @ApiModelProperty(example = "v1_index", value = " v1_index or no_index")
  public String getRangeIndexMode() {
    return rangeIndexMode;
  }

  public void setRangeIndexMode(String rangeIndexMode) {
    this.rangeIndexMode = rangeIndexMode;
  }

  public FieldOptions typeIndexMode(String typeIndexMode) {
    this.typeIndexMode = typeIndexMode;
    return this;
  }

  /**
   * index or no_index
   *
   * @return typeIndexMode
   */
  @JsonProperty("type_index_mode")
  @ApiModelProperty(example = "index", value = " index or no_index")
  public String getTypeIndexMode() {
    return typeIndexMode;
  }

  public void setTypeIndexMode(String typeIndexMode) {
    this.typeIndexMode = typeIndexMode;
  }

  public FieldOptions columnIndexMode(String columnIndexMode) {
    this.columnIndexMode = columnIndexMode;
    return this;
  }

  /**
   * store or no_store
   *
   * @return columnIndexMode
   */
  @JsonProperty("column_index_mode")
  @ApiModelProperty(example = "store", value = " store or no_store")
  public String getColumnIndexMode() {
    return columnIndexMode;
  }

  public void setColumnIndexMode(String columnIndexMode) {
    this.columnIndexMode = columnIndexMode;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldOptions fieldOptions = (FieldOptions) o;
    return Objects.equals(this.indexMode, fieldOptions.indexMode)
        && Objects.equals(this.rangeIndexMode, fieldOptions.rangeIndexMode)
        && Objects.equals(this.typeIndexMode, fieldOptions.typeIndexMode)
        && Objects.equals(this.columnIndexMode, fieldOptions.columnIndexMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(indexMode, rangeIndexMode, typeIndexMode, columnIndexMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldOptions {\n");

    sb.append("    indexMode: ").append(toIndentedString(indexMode)).append("\n");
    sb.append("    rangeIndexMode: ").append(toIndentedString(rangeIndexMode)).append("\n");
    sb.append("    typeIndexMode: ").append(toIndentedString(typeIndexMode)).append("\n");
    sb.append("    columnIndexMode: ").append(toIndentedString(columnIndexMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
