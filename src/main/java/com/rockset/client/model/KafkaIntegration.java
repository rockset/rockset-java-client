/*
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rockset.client.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** KafkaIntegration */
@javax.annotation.Generated(
    value = "io.swagger.codegen.languages.JavaClientCodegen",
    date = "2021-12-09T15:56:21.038-08:00")
public class KafkaIntegration {
  @SerializedName("kafka_topic_names")
  private List<String> kafkaTopicNames = null;

  @SerializedName("source_status_by_topic")
  private Map<String, StatusKafka> sourceStatusByTopic = null;

  /** The format of the Kafka topics being tailed */
  @JsonAdapter(KafkaDataFormatEnum.Adapter.class)
  public enum KafkaDataFormatEnum {
    JSON("JSON"),

    AVRO("AVRO");

    private String value;

    KafkaDataFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KafkaDataFormatEnum fromValue(String text) {
      for (KafkaDataFormatEnum b : KafkaDataFormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<KafkaDataFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KafkaDataFormatEnum enumeration)
          throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KafkaDataFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return KafkaDataFormatEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("kafka_data_format")
  private KafkaDataFormatEnum kafkaDataFormat = null;

  @SerializedName("connection_string")
  private String connectionString = null;

  @SerializedName("use_v3")
  private Boolean useV3 = null;

  @SerializedName("bootstrap_servers")
  private String bootstrapServers = null;

  @SerializedName("security_config")
  private KafkaV3SecurityConfig securityConfig = null;

  public KafkaIntegration kafkaTopicNames(List<String> kafkaTopicNames) {
    this.kafkaTopicNames = kafkaTopicNames;
    return this;
  }

  public KafkaIntegration addKafkaTopicNamesItem(String kafkaTopicNamesItem) {
    if (this.kafkaTopicNames == null) {
      this.kafkaTopicNames = new ArrayList<String>();
    }
    this.kafkaTopicNames.add(kafkaTopicNamesItem);
    return this;
  }

  /**
   * Kafka topics to tail
   *
   * @return kafkaTopicNames
   */
  @JsonProperty("kafka_topic_names")
  @ApiModelProperty(value = "Kafka topics to tail")
  public List<String> getKafkaTopicNames() {
    return kafkaTopicNames;
  }

  public void setKafkaTopicNames(List<String> kafkaTopicNames) {
    this.kafkaTopicNames = kafkaTopicNames;
  }

  /**
   * The status of the Kafka source by topic
   *
   * @return sourceStatusByTopic
   */
  @JsonProperty("source_status_by_topic")
  @ApiModelProperty(
      example = "\"topic-a:DORMANT\"",
      value = "The status of the Kafka source by topic")
  public Map<String, StatusKafka> getSourceStatusByTopic() {
    return sourceStatusByTopic;
  }

  public KafkaIntegration kafkaDataFormat(KafkaDataFormatEnum kafkaDataFormat) {
    this.kafkaDataFormat = kafkaDataFormat;
    return this;
  }

  /**
   * The format of the Kafka topics being tailed
   *
   * @return kafkaDataFormat
   */
  @JsonProperty("kafka_data_format")
  @ApiModelProperty(example = "json", value = "The format of the Kafka topics being tailed")
  public KafkaDataFormatEnum getKafkaDataFormat() {
    return kafkaDataFormat;
  }

  public void setKafkaDataFormat(KafkaDataFormatEnum kafkaDataFormat) {
    this.kafkaDataFormat = kafkaDataFormat;
  }

  /**
   * kafka connection string
   *
   * @return connectionString
   */
  @JsonProperty("connection_string")
  @ApiModelProperty(value = "kafka connection string")
  public String getConnectionString() {
    return connectionString;
  }

  public KafkaIntegration useV3(Boolean useV3) {
    this.useV3 = useV3;
    return this;
  }

  /**
   * Get useV3
   *
   * @return useV3
   */
  @JsonProperty("use_v3")
  @ApiModelProperty(value = "")
  public Boolean isUseV3() {
    return useV3;
  }

  public void setUseV3(Boolean useV3) {
    this.useV3 = useV3;
  }

  public KafkaIntegration bootstrapServers(String bootstrapServers) {
    this.bootstrapServers = bootstrapServers;
    return this;
  }

  /**
   * Get bootstrapServers
   *
   * @return bootstrapServers
   */
  @JsonProperty("bootstrap_servers")
  @ApiModelProperty(value = "")
  public String getBootstrapServers() {
    return bootstrapServers;
  }

  public void setBootstrapServers(String bootstrapServers) {
    this.bootstrapServers = bootstrapServers;
  }

  public KafkaIntegration securityConfig(KafkaV3SecurityConfig securityConfig) {
    this.securityConfig = securityConfig;
    return this;
  }

  /**
   * Get securityConfig
   *
   * @return securityConfig
   */
  @JsonProperty("security_config")
  @ApiModelProperty(value = "")
  public KafkaV3SecurityConfig getSecurityConfig() {
    return securityConfig;
  }

  public void setSecurityConfig(KafkaV3SecurityConfig securityConfig) {
    this.securityConfig = securityConfig;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KafkaIntegration kafkaIntegration = (KafkaIntegration) o;
    return Objects.equals(this.kafkaTopicNames, kafkaIntegration.kafkaTopicNames)
        && Objects.equals(this.sourceStatusByTopic, kafkaIntegration.sourceStatusByTopic)
        && Objects.equals(this.kafkaDataFormat, kafkaIntegration.kafkaDataFormat)
        && Objects.equals(this.connectionString, kafkaIntegration.connectionString)
        && Objects.equals(this.useV3, kafkaIntegration.useV3)
        && Objects.equals(this.bootstrapServers, kafkaIntegration.bootstrapServers)
        && Objects.equals(this.securityConfig, kafkaIntegration.securityConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        kafkaTopicNames,
        sourceStatusByTopic,
        kafkaDataFormat,
        connectionString,
        useV3,
        bootstrapServers,
        securityConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KafkaIntegration {\n");

    sb.append("    kafkaTopicNames: ").append(toIndentedString(kafkaTopicNames)).append("\n");
    sb.append("    sourceStatusByTopic: ")
        .append(toIndentedString(sourceStatusByTopic))
        .append("\n");
    sb.append("    kafkaDataFormat: ").append(toIndentedString(kafkaDataFormat)).append("\n");
    sb.append("    connectionString: ").append(toIndentedString(connectionString)).append("\n");
    sb.append("    useV3: ").append(toIndentedString(useV3)).append("\n");
    sb.append("    bootstrapServers: ").append(toIndentedString(bootstrapServers)).append("\n");
    sb.append("    securityConfig: ").append(toIndentedString(securityConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
