/*
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rockset.client.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import java.util.Objects;

/** SourceRedshift */
@javax.annotation.Generated(
    value = "io.swagger.codegen.languages.JavaClientCodegen",
    date = "2021-12-09T15:56:21.038-08:00")
public class SourceRedshift {
  @SerializedName("database")
  private String database = null;

  @SerializedName("schema")
  private String schema = null;

  @SerializedName("table_name")
  private String tableName = null;

  @SerializedName("incremental_field")
  private String incrementalField = null;

  public SourceRedshift database(String database) {
    this.database = database;
    return this;
  }

  /**
   * name of the database in Redshift Cluster
   *
   * @return database
   */
  @JsonProperty("database")
  @ApiModelProperty(
      example = "dev",
      required = true,
      value = "name of the database in Redshift Cluster")
  public String getDatabase() {
    return database;
  }

  public void setDatabase(String database) {
    this.database = database;
  }

  public SourceRedshift schema(String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * schema which contains the Redshift table
   *
   * @return schema
   */
  @JsonProperty("schema")
  @ApiModelProperty(
      example = "common",
      required = true,
      value = "schema which contains the Redshift table")
  public String getSchema() {
    return schema;
  }

  public void setSchema(String schema) {
    this.schema = schema;
  }

  public SourceRedshift tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * name of Redshift table containing data
   *
   * @return tableName
   */
  @JsonProperty("table_name")
  @ApiModelProperty(
      example = "redshift_table_name",
      required = true,
      value = "name of Redshift table containing data")
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }

  public SourceRedshift incrementalField(String incrementalField) {
    this.incrementalField = incrementalField;
    return this;
  }

  /**
   * field in Redshift source table to monitor for updates
   *
   * @return incrementalField
   */
  @JsonProperty("incremental_field")
  @ApiModelProperty(
      example = "updated_at",
      value = "field in Redshift source table to monitor for updates")
  public String getIncrementalField() {
    return incrementalField;
  }

  public void setIncrementalField(String incrementalField) {
    this.incrementalField = incrementalField;
  }

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceRedshift sourceRedshift = (SourceRedshift) o;
    return Objects.equals(this.database, sourceRedshift.database)
        && Objects.equals(this.schema, sourceRedshift.schema)
        && Objects.equals(this.tableName, sourceRedshift.tableName)
        && Objects.equals(this.incrementalField, sourceRedshift.incrementalField);
  }

  @Override
  public int hashCode() {
    return Objects.hash(database, schema, tableName, incrementalField);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceRedshift {\n");

    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    incrementalField: ").append(toIndentedString(incrementalField)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
