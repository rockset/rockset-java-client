/*
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rockset.client.api;

import com.google.gson.reflect.TypeToken;
import com.rockset.client.ApiCallback;
import com.rockset.client.ApiClient;
import com.rockset.client.ApiResponse;
import com.rockset.client.Configuration;
import com.rockset.client.Pair;
import com.rockset.client.ProgressRequestBody;
import com.rockset.client.ProgressResponseBody;
import com.rockset.client.model.ExecutePublicQueryLambdaRequest;
import com.rockset.client.model.QueryResponse;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SharedLambdasApi {
  private ApiClient apiClient;

  public SharedLambdasApi() {
    this(Configuration.getDefaultApiClient());
  }

  public SharedLambdasApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for execute
   *
   * @param publicAccessId public access ID of the query lambda (required)
   * @param body JSON object (optional)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call executeCall(
      String publicAccessId,
      ExecutePublicQueryLambdaRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath =
        "/v1/public/shared_lambdas/{public_access_id}"
            .replaceAll(
                "\\{" + "public_access_id" + "\\}",
                apiClient.escapeString(publicAccessId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call executeValidateBeforeCall(
      String publicAccessId,
      ExecutePublicQueryLambdaRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'publicAccessId' is set
    if (publicAccessId == null) {
      throw new Exception(
          "Missing the required parameter 'publicAccessId' when calling execute(Async)");
    }

    okhttp3.Call call =
        executeCall(publicAccessId, body, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Execute a Public Query Lambda Execute a public query lambda (full version).
   *
   * @param publicAccessId public access ID of the query lambda (required)
   * @param body JSON object (optional)
   * @return QueryResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public QueryResponse execute(String publicAccessId, ExecutePublicQueryLambdaRequest body)
      throws Exception {
    ApiResponse<QueryResponse> resp = executeWithHttpInfo(publicAccessId, body);
    return resp.getData();
  }

  /**
   * Execute a Public Query Lambda Execute a public query lambda (full version).
   *
   * @param publicAccessId public access ID of the query lambda (required)
   * @param body JSON object (optional)
   * @return ApiResponse&lt;QueryResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<QueryResponse> executeWithHttpInfo(
      String publicAccessId, ExecutePublicQueryLambdaRequest body) throws Exception {
    okhttp3.Call call = executeValidateBeforeCall(publicAccessId, body, null, null);
    Type localVarReturnType = new TypeToken<QueryResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Execute a Public Query Lambda (asynchronously) Execute a public query lambda (full version).
   *
   * @param publicAccessId public access ID of the query lambda (required)
   * @param body JSON object (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call executeAsync(
      String publicAccessId,
      ExecutePublicQueryLambdaRequest body,
      final ApiCallback<QueryResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        executeValidateBeforeCall(publicAccessId, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<QueryResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
