/*
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.rockset.client.api;

import com.rockset.client.ApiCallback;
import com.rockset.client.ApiClient;
import com.rockset.client.ApiResponse;
import com.rockset.client.Configuration;
import com.rockset.client.Pair;
import com.rockset.client.ProgressRequestBody;
import com.rockset.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.rockset.client.model.DeleteSourceResponse;
import com.rockset.client.model.ErrorModel;
import com.rockset.client.model.GetSourceResponse;
import com.rockset.client.model.ListSourcesResponse;
import com.rockset.client.model.Source;
import com.rockset.client.model.SourceBase;
import com.rockset.client.model.SuspendSourceRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SourcesApi {
    private ApiClient apiClient;

    public SourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SourcesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for create
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param body JSON object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws Exception If fail to serialize the request body object
     */
    public okhttp3.Call createCall(String workspace, String collection, Source body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws Exception {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/sources"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(String workspace, String collection, Source body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws Exception {
        
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new Exception("Missing the required parameter 'workspace' when calling create(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new Exception("Missing the required parameter 'collection' when calling create(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new Exception("Missing the required parameter 'body' when calling create(Async)");
        }
        

        okhttp3.Call call = createCall(workspace, collection, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a source
     * Create new source in a collection.
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param body JSON object (required)
     * @return GetSourceResponse
     * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetSourceResponse create(String workspace, String collection, Source body) throws Exception {
        ApiResponse<GetSourceResponse> resp = createWithHttpInfo(workspace, collection, body);
        return resp.getData();
    }

    /**
     * Create a source
     * Create new source in a collection.
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param body JSON object (required)
     * @return ApiResponse&lt;GetSourceResponse&gt;
     * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetSourceResponse> createWithHttpInfo(String workspace, String collection, Source body) throws Exception {
        okhttp3.Call call = createValidateBeforeCall(workspace, collection, body, null, null);
        Type localVarReturnType = new TypeToken<GetSourceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a source (asynchronously)
     * Create new source in a collection.
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param body JSON object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws Exception If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createAsync(String workspace, String collection, Source body, final ApiCallback<GetSourceResponse> callback) throws Exception {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = createValidateBeforeCall(workspace, collection, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSourceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for delete
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws Exception If fail to serialize the request body object
     */
    public okhttp3.Call deleteCall(String workspace, String collection, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws Exception {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/sources/{source}"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()))
            .replaceAll("\\{" + "source" + "\\}", apiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String workspace, String collection, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws Exception {
        
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new Exception("Missing the required parameter 'workspace' when calling delete(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new Exception("Missing the required parameter 'collection' when calling delete(Async)");
        }
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new Exception("Missing the required parameter 'source' when calling delete(Async)");
        }
        

        okhttp3.Call call = deleteCall(workspace, collection, source, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Collection source
     * Delete a collection source
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @return DeleteSourceResponse
     * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeleteSourceResponse delete(String workspace, String collection, String source) throws Exception {
        ApiResponse<DeleteSourceResponse> resp = deleteWithHttpInfo(workspace, collection, source);
        return resp.getData();
    }

    /**
     * Delete Collection source
     * Delete a collection source
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @return ApiResponse&lt;DeleteSourceResponse&gt;
     * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeleteSourceResponse> deleteWithHttpInfo(String workspace, String collection, String source) throws Exception {
        okhttp3.Call call = deleteValidateBeforeCall(workspace, collection, source, null, null);
        Type localVarReturnType = new TypeToken<DeleteSourceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Collection source (asynchronously)
     * Delete a collection source
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws Exception If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteAsync(String workspace, String collection, String source, final ApiCallback<DeleteSourceResponse> callback) throws Exception {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = deleteValidateBeforeCall(workspace, collection, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeleteSourceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for get
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws Exception If fail to serialize the request body object
     */
    public okhttp3.Call getCall(String workspace, String collection, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws Exception {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/sources/{source}"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()))
            .replaceAll("\\{" + "source" + "\\}", apiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String workspace, String collection, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws Exception {
        
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new Exception("Missing the required parameter 'workspace' when calling get(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new Exception("Missing the required parameter 'collection' when calling get(Async)");
        }
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new Exception("Missing the required parameter 'source' when calling get(Async)");
        }
        

        okhttp3.Call call = getCall(workspace, collection, source, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieve source
     * Get details about a collection source.
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @return GetSourceResponse
     * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetSourceResponse get(String workspace, String collection, String source) throws Exception {
        ApiResponse<GetSourceResponse> resp = getWithHttpInfo(workspace, collection, source);
        return resp.getData();
    }

    /**
     * Retrieve source
     * Get details about a collection source.
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @return ApiResponse&lt;GetSourceResponse&gt;
     * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetSourceResponse> getWithHttpInfo(String workspace, String collection, String source) throws Exception {
        okhttp3.Call call = getValidateBeforeCall(workspace, collection, source, null, null);
        Type localVarReturnType = new TypeToken<GetSourceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve source (asynchronously)
     * Get details about a collection source.
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws Exception If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getAsync(String workspace, String collection, String source, final ApiCallback<GetSourceResponse> callback) throws Exception {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getValidateBeforeCall(workspace, collection, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSourceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for list
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws Exception If fail to serialize the request body object
     */
    public okhttp3.Call listCall(String workspace, String collection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws Exception {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/sources"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String workspace, String collection, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws Exception {
        
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new Exception("Missing the required parameter 'workspace' when calling list(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new Exception("Missing the required parameter 'collection' when calling list(Async)");
        }
        

        okhttp3.Call call = listCall(workspace, collection, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List sources in collection
     * Retrieve all sources in a collection.
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @return ListSourcesResponse
     * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListSourcesResponse list(String workspace, String collection) throws Exception {
        ApiResponse<ListSourcesResponse> resp = listWithHttpInfo(workspace, collection);
        return resp.getData();
    }

    /**
     * List sources in collection
     * Retrieve all sources in a collection.
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @return ApiResponse&lt;ListSourcesResponse&gt;
     * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListSourcesResponse> listWithHttpInfo(String workspace, String collection) throws Exception {
        okhttp3.Call call = listValidateBeforeCall(workspace, collection, null, null);
        Type localVarReturnType = new TypeToken<ListSourcesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List sources in collection (asynchronously)
     * Retrieve all sources in a collection.
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws Exception If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listAsync(String workspace, String collection, final ApiCallback<ListSourcesResponse> callback) throws Exception {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = listValidateBeforeCall(workspace, collection, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListSourcesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resume
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws Exception If fail to serialize the request body object
     */
    public okhttp3.Call resumeCall(String workspace, String collection, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws Exception {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/sources/{source}/resume"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()))
            .replaceAll("\\{" + "source" + "\\}", apiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resumeValidateBeforeCall(String workspace, String collection, String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws Exception {
        
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new Exception("Missing the required parameter 'workspace' when calling resume(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new Exception("Missing the required parameter 'collection' when calling resume(Async)");
        }
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new Exception("Missing the required parameter 'source' when calling resume(Async)");
        }
        

        okhttp3.Call call = resumeCall(workspace, collection, source, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Resume source ingest
     * Resume source ingest
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @return GetSourceResponse
     * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetSourceResponse resume(String workspace, String collection, String source) throws Exception {
        ApiResponse<GetSourceResponse> resp = resumeWithHttpInfo(workspace, collection, source);
        return resp.getData();
    }

    /**
     * Resume source ingest
     * Resume source ingest
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @return ApiResponse&lt;GetSourceResponse&gt;
     * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetSourceResponse> resumeWithHttpInfo(String workspace, String collection, String source) throws Exception {
        okhttp3.Call call = resumeValidateBeforeCall(workspace, collection, source, null, null);
        Type localVarReturnType = new TypeToken<GetSourceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resume source ingest (asynchronously)
     * Resume source ingest
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws Exception If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call resumeAsync(String workspace, String collection, String source, final ApiCallback<GetSourceResponse> callback) throws Exception {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = resumeValidateBeforeCall(workspace, collection, source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSourceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for suspend
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @param body JSON object (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws Exception If fail to serialize the request body object
     */
    public okhttp3.Call suspendCall(String workspace, String collection, String source, SuspendSourceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws Exception {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/sources/{source}/suspend"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()))
            .replaceAll("\\{" + "source" + "\\}", apiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suspendValidateBeforeCall(String workspace, String collection, String source, SuspendSourceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws Exception {
        
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new Exception("Missing the required parameter 'workspace' when calling suspend(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new Exception("Missing the required parameter 'collection' when calling suspend(Async)");
        }
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new Exception("Missing the required parameter 'source' when calling suspend(Async)");
        }
        

        okhttp3.Call call = suspendCall(workspace, collection, source, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Suspend source ingest
     * Suspend source ingest
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @param body JSON object (optional)
     * @return GetSourceResponse
     * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetSourceResponse suspend(String workspace, String collection, String source, SuspendSourceRequest body) throws Exception {
        ApiResponse<GetSourceResponse> resp = suspendWithHttpInfo(workspace, collection, source, body);
        return resp.getData();
    }

    /**
     * Suspend source ingest
     * Suspend source ingest
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @param body JSON object (optional)
     * @return ApiResponse&lt;GetSourceResponse&gt;
     * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetSourceResponse> suspendWithHttpInfo(String workspace, String collection, String source, SuspendSourceRequest body) throws Exception {
        okhttp3.Call call = suspendValidateBeforeCall(workspace, collection, source, body, null, null);
        Type localVarReturnType = new TypeToken<GetSourceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Suspend source ingest (asynchronously)
     * Suspend source ingest
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @param body JSON object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws Exception If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call suspendAsync(String workspace, String collection, String source, SuspendSourceRequest body, final ApiCallback<GetSourceResponse> callback) throws Exception {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = suspendValidateBeforeCall(workspace, collection, source, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSourceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for update
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @param body JSON object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws Exception If fail to serialize the request body object
     */
    public okhttp3.Call updateCall(String workspace, String collection, String source, SourceBase body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws Exception {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/orgs/self/ws/{workspace}/collections/{collection}/sources/{source}"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll("\\{" + "collection" + "\\}", apiClient.escapeString(collection.toString()))
            .replaceAll("\\{" + "source" + "\\}", apiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(String workspace, String collection, String source, SourceBase body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws Exception {
        
        // verify the required parameter 'workspace' is set
        if (workspace == null) {
            throw new Exception("Missing the required parameter 'workspace' when calling update(Async)");
        }
        
        // verify the required parameter 'collection' is set
        if (collection == null) {
            throw new Exception("Missing the required parameter 'collection' when calling update(Async)");
        }
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new Exception("Missing the required parameter 'source' when calling update(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new Exception("Missing the required parameter 'body' when calling update(Async)");
        }
        

        okhttp3.Call call = updateCall(workspace, collection, source, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a collection source
     * Update details about a collection source.
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @param body JSON object (required)
     * @return GetSourceResponse
     * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetSourceResponse update(String workspace, String collection, String source, SourceBase body) throws Exception {
        ApiResponse<GetSourceResponse> resp = updateWithHttpInfo(workspace, collection, source, body);
        return resp.getData();
    }

    /**
     * Update a collection source
     * Update details about a collection source.
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @param body JSON object (required)
     * @return ApiResponse&lt;GetSourceResponse&gt;
     * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetSourceResponse> updateWithHttpInfo(String workspace, String collection, String source, SourceBase body) throws Exception {
        okhttp3.Call call = updateValidateBeforeCall(workspace, collection, source, body, null, null);
        Type localVarReturnType = new TypeToken<GetSourceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a collection source (asynchronously)
     * Update details about a collection source.
     * @param workspace name of the workspace (required)
     * @param collection name of the collection (required)
     * @param source id of source (required)
     * @param body JSON object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws Exception If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateAsync(String workspace, String collection, String source, SourceBase body, final ApiCallback<GetSourceResponse> callback) throws Exception {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = updateValidateBeforeCall(workspace, collection, source, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetSourceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
