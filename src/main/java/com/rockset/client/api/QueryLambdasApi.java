/*
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rockset.client.api;

import com.google.gson.reflect.TypeToken;
import com.rockset.client.ApiCallback;
import com.rockset.client.ApiClient;
import com.rockset.client.ApiResponse;
import com.rockset.client.Configuration;
import com.rockset.client.Pair;
import com.rockset.client.ProgressRequestBody;
import com.rockset.client.ProgressResponseBody;
import com.rockset.client.model.CreateQueryLambdaRequest;
import com.rockset.client.model.CreateQueryLambdaTagRequest;
import com.rockset.client.model.DeleteQueryLambdaResponse;
import com.rockset.client.model.ExecuteQueryLambdaRequest;
import com.rockset.client.model.ListQueryLambdaTagsResponse;
import com.rockset.client.model.ListQueryLambdaVersionsResponse;
import com.rockset.client.model.ListQueryLambdasResponse;
import com.rockset.client.model.QueryLambdaTagResponse;
import com.rockset.client.model.QueryLambdaVersionResponse;
import com.rockset.client.model.QueryResponse;
import com.rockset.client.model.UpdateQueryLambdaRequest;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QueryLambdasApi {
  private ApiClient apiClient;

  public QueryLambdasApi() {
    this(Configuration.getDefaultApiClient());
  }

  public QueryLambdasApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for create
   *
   * @param workspace name of the workspace (required)
   * @param body JSON object (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call createCall(
      String workspace,
      CreateQueryLambdaRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/lambdas"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call createValidateBeforeCall(
      String workspace,
      CreateQueryLambdaRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception("Missing the required parameter 'workspace' when calling create(Async)");
    }

    // verify the required parameter 'body' is set
    if (body == null) {
      throw new Exception("Missing the required parameter 'body' when calling create(Async)");
    }

    okhttp3.Call call = createCall(workspace, body, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Create Query Lambda Create a Query Lambda in given workspace.
   *
   * @param workspace name of the workspace (required)
   * @param body JSON object (required)
   * @return QueryLambdaVersionResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public QueryLambdaVersionResponse create(String workspace, CreateQueryLambdaRequest body)
      throws Exception {
    ApiResponse<QueryLambdaVersionResponse> resp = createWithHttpInfo(workspace, body);
    return resp.getData();
  }

  /**
   * Create Query Lambda Create a Query Lambda in given workspace.
   *
   * @param workspace name of the workspace (required)
   * @param body JSON object (required)
   * @return ApiResponse&lt;QueryLambdaVersionResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<QueryLambdaVersionResponse> createWithHttpInfo(
      String workspace, CreateQueryLambdaRequest body) throws Exception {
    okhttp3.Call call = createValidateBeforeCall(workspace, body, null, null);
    Type localVarReturnType = new TypeToken<QueryLambdaVersionResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Create Query Lambda (asynchronously) Create a Query Lambda in given workspace.
   *
   * @param workspace name of the workspace (required)
   * @param body JSON object (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call createAsync(
      String workspace,
      CreateQueryLambdaRequest body,
      final ApiCallback<QueryLambdaVersionResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        createValidateBeforeCall(workspace, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<QueryLambdaVersionResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for create_0
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param body JSON object (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call create_0Call(
      String workspace,
      String queryLambda,
      CreateQueryLambdaTagRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll(
                "\\{" + "queryLambda" + "\\}", apiClient.escapeString(queryLambda.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call create_0ValidateBeforeCall(
      String workspace,
      String queryLambda,
      CreateQueryLambdaTagRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception(
          "Missing the required parameter 'workspace' when calling create_0(Async)");
    }

    // verify the required parameter 'queryLambda' is set
    if (queryLambda == null) {
      throw new Exception(
          "Missing the required parameter 'queryLambda' when calling create_0(Async)");
    }

    // verify the required parameter 'body' is set
    if (body == null) {
      throw new Exception("Missing the required parameter 'body' when calling create_0(Async)");
    }

    okhttp3.Call call =
        create_0Call(workspace, queryLambda, body, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Create Query Lambda Tag Create a tag for a specific Query Lambda version, or update that tag if
   * it already exists.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param body JSON object (required)
   * @return QueryLambdaTagResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public QueryLambdaTagResponse create_0(
      String workspace, String queryLambda, CreateQueryLambdaTagRequest body) throws Exception {
    ApiResponse<QueryLambdaTagResponse> resp = create_0WithHttpInfo(workspace, queryLambda, body);
    return resp.getData();
  }

  /**
   * Create Query Lambda Tag Create a tag for a specific Query Lambda version, or update that tag if
   * it already exists.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param body JSON object (required)
   * @return ApiResponse&lt;QueryLambdaTagResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<QueryLambdaTagResponse> create_0WithHttpInfo(
      String workspace, String queryLambda, CreateQueryLambdaTagRequest body) throws Exception {
    okhttp3.Call call = create_0ValidateBeforeCall(workspace, queryLambda, body, null, null);
    Type localVarReturnType = new TypeToken<QueryLambdaTagResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Create Query Lambda Tag (asynchronously) Create a tag for a specific Query Lambda version, or
   * update that tag if it already exists.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param body JSON object (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call create_0Async(
      String workspace,
      String queryLambda,
      CreateQueryLambdaTagRequest body,
      final ApiCallback<QueryLambdaTagResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        create_0ValidateBeforeCall(
            workspace, queryLambda, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<QueryLambdaTagResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for delete
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call deleteCall(
      String workspace,
      String queryLambda,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll(
                "\\{" + "queryLambda" + "\\}", apiClient.escapeString(queryLambda.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteValidateBeforeCall(
      String workspace,
      String queryLambda,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception("Missing the required parameter 'workspace' when calling delete(Async)");
    }

    // verify the required parameter 'queryLambda' is set
    if (queryLambda == null) {
      throw new Exception(
          "Missing the required parameter 'queryLambda' when calling delete(Async)");
    }

    okhttp3.Call call =
        deleteCall(workspace, queryLambda, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Delete Query Lambda Delete a Query Lambda.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @return DeleteQueryLambdaResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public DeleteQueryLambdaResponse delete(String workspace, String queryLambda) throws Exception {
    ApiResponse<DeleteQueryLambdaResponse> resp = deleteWithHttpInfo(workspace, queryLambda);
    return resp.getData();
  }

  /**
   * Delete Query Lambda Delete a Query Lambda.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @return ApiResponse&lt;DeleteQueryLambdaResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<DeleteQueryLambdaResponse> deleteWithHttpInfo(
      String workspace, String queryLambda) throws Exception {
    okhttp3.Call call = deleteValidateBeforeCall(workspace, queryLambda, null, null);
    Type localVarReturnType = new TypeToken<DeleteQueryLambdaResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Delete Query Lambda (asynchronously) Delete a Query Lambda.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call deleteAsync(
      String workspace, String queryLambda, final ApiCallback<DeleteQueryLambdaResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        deleteValidateBeforeCall(workspace, queryLambda, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<DeleteQueryLambdaResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for delete_0
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param tag name of the tag (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call delete_0Call(
      String workspace,
      String queryLambda,
      String tag,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags/{tag}"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll(
                "\\{" + "queryLambda" + "\\}", apiClient.escapeString(queryLambda.toString()))
            .replaceAll("\\{" + "tag" + "\\}", apiClient.escapeString(tag.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call delete_0ValidateBeforeCall(
      String workspace,
      String queryLambda,
      String tag,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception(
          "Missing the required parameter 'workspace' when calling delete_0(Async)");
    }

    // verify the required parameter 'queryLambda' is set
    if (queryLambda == null) {
      throw new Exception(
          "Missing the required parameter 'queryLambda' when calling delete_0(Async)");
    }

    // verify the required parameter 'tag' is set
    if (tag == null) {
      throw new Exception("Missing the required parameter 'tag' when calling delete_0(Async)");
    }

    okhttp3.Call call =
        delete_0Call(workspace, queryLambda, tag, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Delete Query Lambda Tag Version Delete a tag for a specific Query Lambda
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param tag name of the tag (required)
   * @return QueryLambdaTagResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public QueryLambdaTagResponse delete_0(String workspace, String queryLambda, String tag)
      throws Exception {
    ApiResponse<QueryLambdaTagResponse> resp = delete_0WithHttpInfo(workspace, queryLambda, tag);
    return resp.getData();
  }

  /**
   * Delete Query Lambda Tag Version Delete a tag for a specific Query Lambda
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param tag name of the tag (required)
   * @return ApiResponse&lt;QueryLambdaTagResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<QueryLambdaTagResponse> delete_0WithHttpInfo(
      String workspace, String queryLambda, String tag) throws Exception {
    okhttp3.Call call = delete_0ValidateBeforeCall(workspace, queryLambda, tag, null, null);
    Type localVarReturnType = new TypeToken<QueryLambdaTagResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Delete Query Lambda Tag Version (asynchronously) Delete a tag for a specific Query Lambda
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param tag name of the tag (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call delete_0Async(
      String workspace,
      String queryLambda,
      String tag,
      final ApiCallback<QueryLambdaTagResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        delete_0ValidateBeforeCall(
            workspace, queryLambda, tag, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<QueryLambdaTagResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for delete_1
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param version version (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call delete_1Call(
      String workspace,
      String queryLambda,
      String version,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/version/{version}"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll(
                "\\{" + "queryLambda" + "\\}", apiClient.escapeString(queryLambda.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call delete_1ValidateBeforeCall(
      String workspace,
      String queryLambda,
      String version,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception(
          "Missing the required parameter 'workspace' when calling delete_1(Async)");
    }

    // verify the required parameter 'queryLambda' is set
    if (queryLambda == null) {
      throw new Exception(
          "Missing the required parameter 'queryLambda' when calling delete_1(Async)");
    }

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new Exception("Missing the required parameter 'version' when calling delete_1(Async)");
    }

    okhttp3.Call call =
        delete_1Call(workspace, queryLambda, version, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Delete Query Lambda Version Delete a Query Lambda version.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param version version (required)
   * @return QueryLambdaVersionResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public QueryLambdaVersionResponse delete_1(String workspace, String queryLambda, String version)
      throws Exception {
    ApiResponse<QueryLambdaVersionResponse> resp =
        delete_1WithHttpInfo(workspace, queryLambda, version);
    return resp.getData();
  }

  /**
   * Delete Query Lambda Version Delete a Query Lambda version.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param version version (required)
   * @return ApiResponse&lt;QueryLambdaVersionResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<QueryLambdaVersionResponse> delete_1WithHttpInfo(
      String workspace, String queryLambda, String version) throws Exception {
    okhttp3.Call call = delete_1ValidateBeforeCall(workspace, queryLambda, version, null, null);
    Type localVarReturnType = new TypeToken<QueryLambdaVersionResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Delete Query Lambda Version (asynchronously) Delete a Query Lambda version.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param version version (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call delete_1Async(
      String workspace,
      String queryLambda,
      String version,
      final ApiCallback<QueryLambdaVersionResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        delete_1ValidateBeforeCall(
            workspace, queryLambda, version, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<QueryLambdaVersionResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for execute
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param tag tag (required)
   * @param body JSON object (optional)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call executeCall(
      String workspace,
      String queryLambda,
      String tag,
      ExecuteQueryLambdaRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags/{tag}"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll(
                "\\{" + "queryLambda" + "\\}", apiClient.escapeString(queryLambda.toString()))
            .replaceAll("\\{" + "tag" + "\\}", apiClient.escapeString(tag.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call executeValidateBeforeCall(
      String workspace,
      String queryLambda,
      String tag,
      ExecuteQueryLambdaRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception("Missing the required parameter 'workspace' when calling execute(Async)");
    }

    // verify the required parameter 'queryLambda' is set
    if (queryLambda == null) {
      throw new Exception(
          "Missing the required parameter 'queryLambda' when calling execute(Async)");
    }

    // verify the required parameter 'tag' is set
    if (tag == null) {
      throw new Exception("Missing the required parameter 'tag' when calling execute(Async)");
    }

    okhttp3.Call call =
        executeCall(workspace, queryLambda, tag, body, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Execute Query Lambda By Tag Execute the Query Lambda version associated with a given tag.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param tag tag (required)
   * @param body JSON object (optional)
   * @return QueryResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public QueryResponse execute(
      String workspace, String queryLambda, String tag, ExecuteQueryLambdaRequest body)
      throws Exception {
    ApiResponse<QueryResponse> resp = executeWithHttpInfo(workspace, queryLambda, tag, body);
    return resp.getData();
  }

  /**
   * Execute Query Lambda By Tag Execute the Query Lambda version associated with a given tag.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param tag tag (required)
   * @param body JSON object (optional)
   * @return ApiResponse&lt;QueryResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<QueryResponse> executeWithHttpInfo(
      String workspace, String queryLambda, String tag, ExecuteQueryLambdaRequest body)
      throws Exception {
    okhttp3.Call call = executeValidateBeforeCall(workspace, queryLambda, tag, body, null, null);
    Type localVarReturnType = new TypeToken<QueryResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Execute Query Lambda By Tag (asynchronously) Execute the Query Lambda version associated with a
   * given tag.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param tag tag (required)
   * @param body JSON object (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call executeAsync(
      String workspace,
      String queryLambda,
      String tag,
      ExecuteQueryLambdaRequest body,
      final ApiCallback<QueryResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        executeValidateBeforeCall(
            workspace, queryLambda, tag, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<QueryResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for execute_0
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param version version (required)
   * @param body JSON object (optional)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call execute_0Call(
      String workspace,
      String queryLambda,
      String version,
      ExecuteQueryLambdaRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions/{version}"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll(
                "\\{" + "queryLambda" + "\\}", apiClient.escapeString(queryLambda.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call execute_0ValidateBeforeCall(
      String workspace,
      String queryLambda,
      String version,
      ExecuteQueryLambdaRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception(
          "Missing the required parameter 'workspace' when calling execute_0(Async)");
    }

    // verify the required parameter 'queryLambda' is set
    if (queryLambda == null) {
      throw new Exception(
          "Missing the required parameter 'queryLambda' when calling execute_0(Async)");
    }

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new Exception("Missing the required parameter 'version' when calling execute_0(Async)");
    }

    okhttp3.Call call =
        execute_0Call(
            workspace, queryLambda, version, body, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Execute Query Lambda By Version Execute a particular version of a Query Lambda.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param version version (required)
   * @param body JSON object (optional)
   * @return QueryResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public QueryResponse execute_0(
      String workspace, String queryLambda, String version, ExecuteQueryLambdaRequest body)
      throws Exception {
    ApiResponse<QueryResponse> resp = execute_0WithHttpInfo(workspace, queryLambda, version, body);
    return resp.getData();
  }

  /**
   * Execute Query Lambda By Version Execute a particular version of a Query Lambda.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param version version (required)
   * @param body JSON object (optional)
   * @return ApiResponse&lt;QueryResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<QueryResponse> execute_0WithHttpInfo(
      String workspace, String queryLambda, String version, ExecuteQueryLambdaRequest body)
      throws Exception {
    okhttp3.Call call =
        execute_0ValidateBeforeCall(workspace, queryLambda, version, body, null, null);
    Type localVarReturnType = new TypeToken<QueryResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Execute Query Lambda By Version (asynchronously) Execute a particular version of a Query
   * Lambda.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param version version (required)
   * @param body JSON object (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call execute_0Async(
      String workspace,
      String queryLambda,
      String version,
      ExecuteQueryLambdaRequest body,
      final ApiCallback<QueryResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        execute_0ValidateBeforeCall(
            workspace, queryLambda, version, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<QueryResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for get
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param tag name of the tag (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call getCall(
      String workspace,
      String queryLambda,
      String tag,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags/{tag}"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll(
                "\\{" + "queryLambda" + "\\}", apiClient.escapeString(queryLambda.toString()))
            .replaceAll("\\{" + "tag" + "\\}", apiClient.escapeString(tag.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getValidateBeforeCall(
      String workspace,
      String queryLambda,
      String tag,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception("Missing the required parameter 'workspace' when calling get(Async)");
    }

    // verify the required parameter 'queryLambda' is set
    if (queryLambda == null) {
      throw new Exception("Missing the required parameter 'queryLambda' when calling get(Async)");
    }

    // verify the required parameter 'tag' is set
    if (tag == null) {
      throw new Exception("Missing the required parameter 'tag' when calling get(Async)");
    }

    okhttp3.Call call =
        getCall(workspace, queryLambda, tag, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Retrieve Query Lambda Tag Retrieve the Query Lambda version associated with a given tag.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param tag name of the tag (required)
   * @return QueryLambdaTagResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public QueryLambdaTagResponse get(String workspace, String queryLambda, String tag)
      throws Exception {
    ApiResponse<QueryLambdaTagResponse> resp = getWithHttpInfo(workspace, queryLambda, tag);
    return resp.getData();
  }

  /**
   * Retrieve Query Lambda Tag Retrieve the Query Lambda version associated with a given tag.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param tag name of the tag (required)
   * @return ApiResponse&lt;QueryLambdaTagResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<QueryLambdaTagResponse> getWithHttpInfo(
      String workspace, String queryLambda, String tag) throws Exception {
    okhttp3.Call call = getValidateBeforeCall(workspace, queryLambda, tag, null, null);
    Type localVarReturnType = new TypeToken<QueryLambdaTagResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Retrieve Query Lambda Tag (asynchronously) Retrieve the Query Lambda version associated with a
   * given tag.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param tag name of the tag (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call getAsync(
      String workspace,
      String queryLambda,
      String tag,
      final ApiCallback<QueryLambdaTagResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        getValidateBeforeCall(
            workspace, queryLambda, tag, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<QueryLambdaTagResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for get_0
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param version version (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call get_0Call(
      String workspace,
      String queryLambda,
      String version,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions/{version}"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll(
                "\\{" + "queryLambda" + "\\}", apiClient.escapeString(queryLambda.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call get_0ValidateBeforeCall(
      String workspace,
      String queryLambda,
      String version,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception("Missing the required parameter 'workspace' when calling get_0(Async)");
    }

    // verify the required parameter 'queryLambda' is set
    if (queryLambda == null) {
      throw new Exception("Missing the required parameter 'queryLambda' when calling get_0(Async)");
    }

    // verify the required parameter 'version' is set
    if (version == null) {
      throw new Exception("Missing the required parameter 'version' when calling get_0(Async)");
    }

    okhttp3.Call call =
        get_0Call(workspace, queryLambda, version, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Retrieve Query Lambda Version Retrieve details for a specified version of a Query Lambda.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param version version (required)
   * @return QueryLambdaVersionResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public QueryLambdaVersionResponse get_0(String workspace, String queryLambda, String version)
      throws Exception {
    ApiResponse<QueryLambdaVersionResponse> resp =
        get_0WithHttpInfo(workspace, queryLambda, version);
    return resp.getData();
  }

  /**
   * Retrieve Query Lambda Version Retrieve details for a specified version of a Query Lambda.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param version version (required)
   * @return ApiResponse&lt;QueryLambdaVersionResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<QueryLambdaVersionResponse> get_0WithHttpInfo(
      String workspace, String queryLambda, String version) throws Exception {
    okhttp3.Call call = get_0ValidateBeforeCall(workspace, queryLambda, version, null, null);
    Type localVarReturnType = new TypeToken<QueryLambdaVersionResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Retrieve Query Lambda Version (asynchronously) Retrieve details for a specified version of a
   * Query Lambda.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param version version (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call get_0Async(
      String workspace,
      String queryLambda,
      String version,
      final ApiCallback<QueryLambdaVersionResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        get_0ValidateBeforeCall(
            workspace, queryLambda, version, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<QueryLambdaVersionResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for list
   *
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call listCall(
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/v1/orgs/self/lambdas";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call listValidateBeforeCall(
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    okhttp3.Call call = listCall(progressListener, progressRequestListener);
    return call;
  }

  /**
   * List Query Lambdas List all Query Lambdas in an organization.
   *
   * @return ListQueryLambdasResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ListQueryLambdasResponse list() throws Exception {
    ApiResponse<ListQueryLambdasResponse> resp = listWithHttpInfo();
    return resp.getData();
  }

  /**
   * List Query Lambdas List all Query Lambdas in an organization.
   *
   * @return ApiResponse&lt;ListQueryLambdasResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<ListQueryLambdasResponse> listWithHttpInfo() throws Exception {
    okhttp3.Call call = listValidateBeforeCall(null, null);
    Type localVarReturnType = new TypeToken<ListQueryLambdasResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * List Query Lambdas (asynchronously) List all Query Lambdas in an organization.
   *
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call listAsync(final ApiCallback<ListQueryLambdasResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call = listValidateBeforeCall(progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ListQueryLambdasResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for list_0
   *
   * @param workspace name of the workspace (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call list_0Call(
      String workspace,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/lambdas"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call list_0ValidateBeforeCall(
      String workspace,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception("Missing the required parameter 'workspace' when calling list_0(Async)");
    }

    okhttp3.Call call = list_0Call(workspace, progressListener, progressRequestListener);
    return call;
  }

  /**
   * List Query Lambdas in Workspace List all Query Lambdas under given workspace.
   *
   * @param workspace name of the workspace (required)
   * @return ListQueryLambdasResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ListQueryLambdasResponse list_0(String workspace) throws Exception {
    ApiResponse<ListQueryLambdasResponse> resp = list_0WithHttpInfo(workspace);
    return resp.getData();
  }

  /**
   * List Query Lambdas in Workspace List all Query Lambdas under given workspace.
   *
   * @param workspace name of the workspace (required)
   * @return ApiResponse&lt;ListQueryLambdasResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<ListQueryLambdasResponse> list_0WithHttpInfo(String workspace)
      throws Exception {
    okhttp3.Call call = list_0ValidateBeforeCall(workspace, null, null);
    Type localVarReturnType = new TypeToken<ListQueryLambdasResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * List Query Lambdas in Workspace (asynchronously) List all Query Lambdas under given workspace.
   *
   * @param workspace name of the workspace (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call list_0Async(
      String workspace, final ApiCallback<ListQueryLambdasResponse> callback) throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        list_0ValidateBeforeCall(workspace, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ListQueryLambdasResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for list_1
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call list_1Call(
      String workspace,
      String queryLambda,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/tags"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll(
                "\\{" + "queryLambda" + "\\}", apiClient.escapeString(queryLambda.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call list_1ValidateBeforeCall(
      String workspace,
      String queryLambda,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception("Missing the required parameter 'workspace' when calling list_1(Async)");
    }

    // verify the required parameter 'queryLambda' is set
    if (queryLambda == null) {
      throw new Exception(
          "Missing the required parameter 'queryLambda' when calling list_1(Async)");
    }

    okhttp3.Call call =
        list_1Call(workspace, queryLambda, progressListener, progressRequestListener);
    return call;
  }

  /**
   * List Query Lambda Tags List all tags associated with a Query Lambda
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @return ListQueryLambdaTagsResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ListQueryLambdaTagsResponse list_1(String workspace, String queryLambda) throws Exception {
    ApiResponse<ListQueryLambdaTagsResponse> resp = list_1WithHttpInfo(workspace, queryLambda);
    return resp.getData();
  }

  /**
   * List Query Lambda Tags List all tags associated with a Query Lambda
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @return ApiResponse&lt;ListQueryLambdaTagsResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<ListQueryLambdaTagsResponse> list_1WithHttpInfo(
      String workspace, String queryLambda) throws Exception {
    okhttp3.Call call = list_1ValidateBeforeCall(workspace, queryLambda, null, null);
    Type localVarReturnType = new TypeToken<ListQueryLambdaTagsResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * List Query Lambda Tags (asynchronously) List all tags associated with a Query Lambda
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call list_1Async(
      String workspace, String queryLambda, final ApiCallback<ListQueryLambdaTagsResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        list_1ValidateBeforeCall(workspace, queryLambda, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ListQueryLambdaTagsResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for list_2
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call list_2Call(
      String workspace,
      String queryLambda,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll(
                "\\{" + "queryLambda" + "\\}", apiClient.escapeString(queryLambda.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call list_2ValidateBeforeCall(
      String workspace,
      String queryLambda,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception("Missing the required parameter 'workspace' when calling list_2(Async)");
    }

    // verify the required parameter 'queryLambda' is set
    if (queryLambda == null) {
      throw new Exception(
          "Missing the required parameter 'queryLambda' when calling list_2(Async)");
    }

    okhttp3.Call call =
        list_2Call(workspace, queryLambda, progressListener, progressRequestListener);
    return call;
  }

  /**
   * List Query Lambda Versions List all versions of a Query Lambda.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @return ListQueryLambdaVersionsResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ListQueryLambdaVersionsResponse list_2(String workspace, String queryLambda)
      throws Exception {
    ApiResponse<ListQueryLambdaVersionsResponse> resp = list_2WithHttpInfo(workspace, queryLambda);
    return resp.getData();
  }

  /**
   * List Query Lambda Versions List all versions of a Query Lambda.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @return ApiResponse&lt;ListQueryLambdaVersionsResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<ListQueryLambdaVersionsResponse> list_2WithHttpInfo(
      String workspace, String queryLambda) throws Exception {
    okhttp3.Call call = list_2ValidateBeforeCall(workspace, queryLambda, null, null);
    Type localVarReturnType = new TypeToken<ListQueryLambdaVersionsResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * List Query Lambda Versions (asynchronously) List all versions of a Query Lambda.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call list_2Async(
      String workspace,
      String queryLambda,
      final ApiCallback<ListQueryLambdaVersionsResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        list_2ValidateBeforeCall(workspace, queryLambda, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ListQueryLambdaVersionsResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for update
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param body JSON object (required)
   * @param create Create a new Query Lambda if one does not exist already. (optional)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call updateCall(
      String workspace,
      String queryLambda,
      UpdateQueryLambdaRequest body,
      Boolean create,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/lambdas/{queryLambda}/versions"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll(
                "\\{" + "queryLambda" + "\\}", apiClient.escapeString(queryLambda.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (create != null) localVarQueryParams.addAll(apiClient.parameterToPair("create", create));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call updateValidateBeforeCall(
      String workspace,
      String queryLambda,
      UpdateQueryLambdaRequest body,
      Boolean create,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception("Missing the required parameter 'workspace' when calling update(Async)");
    }

    // verify the required parameter 'queryLambda' is set
    if (queryLambda == null) {
      throw new Exception(
          "Missing the required parameter 'queryLambda' when calling update(Async)");
    }

    // verify the required parameter 'body' is set
    if (body == null) {
      throw new Exception("Missing the required parameter 'body' when calling update(Async)");
    }

    okhttp3.Call call =
        updateCall(workspace, queryLambda, body, create, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Update Query Lambda Create a new version of a Query Lambda in given workspace.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param body JSON object (required)
   * @param create Create a new Query Lambda if one does not exist already. (optional)
   * @return QueryLambdaVersionResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public QueryLambdaVersionResponse update(
      String workspace, String queryLambda, UpdateQueryLambdaRequest body, Boolean create)
      throws Exception {
    ApiResponse<QueryLambdaVersionResponse> resp =
        updateWithHttpInfo(workspace, queryLambda, body, create);
    return resp.getData();
  }

  /**
   * Update Query Lambda Create a new version of a Query Lambda in given workspace.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param body JSON object (required)
   * @param create Create a new Query Lambda if one does not exist already. (optional)
   * @return ApiResponse&lt;QueryLambdaVersionResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<QueryLambdaVersionResponse> updateWithHttpInfo(
      String workspace, String queryLambda, UpdateQueryLambdaRequest body, Boolean create)
      throws Exception {
    okhttp3.Call call = updateValidateBeforeCall(workspace, queryLambda, body, create, null, null);
    Type localVarReturnType = new TypeToken<QueryLambdaVersionResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Update Query Lambda (asynchronously) Create a new version of a Query Lambda in given workspace.
   *
   * @param workspace name of the workspace (required)
   * @param queryLambda name of the Query Lambda (required)
   * @param body JSON object (required)
   * @param create Create a new Query Lambda if one does not exist already. (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call updateAsync(
      String workspace,
      String queryLambda,
      UpdateQueryLambdaRequest body,
      Boolean create,
      final ApiCallback<QueryLambdaVersionResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        updateValidateBeforeCall(
            workspace, queryLambda, body, create, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<QueryLambdaVersionResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
