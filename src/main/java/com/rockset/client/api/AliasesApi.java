/*
 * REST API
 * Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.rockset.client.api;

import com.google.gson.reflect.TypeToken;
import com.rockset.client.ApiCallback;
import com.rockset.client.ApiClient;
import com.rockset.client.ApiResponse;
import com.rockset.client.Configuration;
import com.rockset.client.Pair;
import com.rockset.client.ProgressRequestBody;
import com.rockset.client.ProgressResponseBody;
import com.rockset.client.model.CreateAliasRequest;
import com.rockset.client.model.CreateAliasResponse;
import com.rockset.client.model.DeleteAliasResponse;
import com.rockset.client.model.GetAliasResponse;
import com.rockset.client.model.ListAliasesResponse;
import com.rockset.client.model.UpdateAliasRequest;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AliasesApi {
  private ApiClient apiClient;

  public AliasesApi() {
    this(Configuration.getDefaultApiClient());
  }

  public AliasesApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for create
   *
   * @param workspace name of the workspace (required)
   * @param body JSON object (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call createCall(
      String workspace,
      CreateAliasRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/aliases"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call createValidateBeforeCall(
      String workspace,
      CreateAliasRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception("Missing the required parameter 'workspace' when calling create(Async)");
    }

    // verify the required parameter 'body' is set
    if (body == null) {
      throw new Exception("Missing the required parameter 'body' when calling create(Async)");
    }

    okhttp3.Call call = createCall(workspace, body, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Create Alias Create new alias in a workspace.
   *
   * @param workspace name of the workspace (required)
   * @param body JSON object (required)
   * @return CreateAliasResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public CreateAliasResponse create(String workspace, CreateAliasRequest body) throws Exception {
    ApiResponse<CreateAliasResponse> resp = createWithHttpInfo(workspace, body);
    return resp.getData();
  }

  /**
   * Create Alias Create new alias in a workspace.
   *
   * @param workspace name of the workspace (required)
   * @param body JSON object (required)
   * @return ApiResponse&lt;CreateAliasResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<CreateAliasResponse> createWithHttpInfo(
      String workspace, CreateAliasRequest body) throws Exception {
    okhttp3.Call call = createValidateBeforeCall(workspace, body, null, null);
    Type localVarReturnType = new TypeToken<CreateAliasResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Create Alias (asynchronously) Create new alias in a workspace.
   *
   * @param workspace name of the workspace (required)
   * @param body JSON object (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call createAsync(
      String workspace, CreateAliasRequest body, final ApiCallback<CreateAliasResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        createValidateBeforeCall(workspace, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<CreateAliasResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for delete
   *
   * @param workspace name of the workspace (required)
   * @param alias name of the alias (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call deleteCall(
      String workspace,
      String alias,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/aliases/{alias}"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll("\\{" + "alias" + "\\}", apiClient.escapeString(alias.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call deleteValidateBeforeCall(
      String workspace,
      String alias,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception("Missing the required parameter 'workspace' when calling delete(Async)");
    }

    // verify the required parameter 'alias' is set
    if (alias == null) {
      throw new Exception("Missing the required parameter 'alias' when calling delete(Async)");
    }

    okhttp3.Call call = deleteCall(workspace, alias, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Delete Alias Delete an alias.
   *
   * @param workspace name of the workspace (required)
   * @param alias name of the alias (required)
   * @return DeleteAliasResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public DeleteAliasResponse delete(String workspace, String alias) throws Exception {
    ApiResponse<DeleteAliasResponse> resp = deleteWithHttpInfo(workspace, alias);
    return resp.getData();
  }

  /**
   * Delete Alias Delete an alias.
   *
   * @param workspace name of the workspace (required)
   * @param alias name of the alias (required)
   * @return ApiResponse&lt;DeleteAliasResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<DeleteAliasResponse> deleteWithHttpInfo(String workspace, String alias)
      throws Exception {
    okhttp3.Call call = deleteValidateBeforeCall(workspace, alias, null, null);
    Type localVarReturnType = new TypeToken<DeleteAliasResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Delete Alias (asynchronously) Delete an alias.
   *
   * @param workspace name of the workspace (required)
   * @param alias name of the alias (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call deleteAsync(
      String workspace, String alias, final ApiCallback<DeleteAliasResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        deleteValidateBeforeCall(workspace, alias, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<DeleteAliasResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for get
   *
   * @param workspace name of the workspace (required)
   * @param alias name of the alias (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call getCall(
      String workspace,
      String alias,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/aliases/{alias}"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll("\\{" + "alias" + "\\}", apiClient.escapeString(alias.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call getValidateBeforeCall(
      String workspace,
      String alias,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception("Missing the required parameter 'workspace' when calling get(Async)");
    }

    // verify the required parameter 'alias' is set
    if (alias == null) {
      throw new Exception("Missing the required parameter 'alias' when calling get(Async)");
    }

    okhttp3.Call call = getCall(workspace, alias, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Retrieve Alias Get details about an alias
   *
   * @param workspace name of the workspace (required)
   * @param alias name of the alias (required)
   * @return GetAliasResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public GetAliasResponse get(String workspace, String alias) throws Exception {
    ApiResponse<GetAliasResponse> resp = getWithHttpInfo(workspace, alias);
    return resp.getData();
  }

  /**
   * Retrieve Alias Get details about an alias
   *
   * @param workspace name of the workspace (required)
   * @param alias name of the alias (required)
   * @return ApiResponse&lt;GetAliasResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<GetAliasResponse> getWithHttpInfo(String workspace, String alias)
      throws Exception {
    okhttp3.Call call = getValidateBeforeCall(workspace, alias, null, null);
    Type localVarReturnType = new TypeToken<GetAliasResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Retrieve Alias (asynchronously) Get details about an alias
   *
   * @param workspace name of the workspace (required)
   * @param alias name of the alias (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call getAsync(
      String workspace, String alias, final ApiCallback<GetAliasResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        getValidateBeforeCall(workspace, alias, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<GetAliasResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for list
   *
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call listCall(
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/v1/orgs/self/aliases";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call listValidateBeforeCall(
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    okhttp3.Call call = listCall(progressListener, progressRequestListener);
    return call;
  }

  /**
   * List Aliases Retrieve all aliases in an organization
   *
   * @return ListAliasesResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ListAliasesResponse list() throws Exception {
    ApiResponse<ListAliasesResponse> resp = listWithHttpInfo();
    return resp.getData();
  }

  /**
   * List Aliases Retrieve all aliases in an organization
   *
   * @return ApiResponse&lt;ListAliasesResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<ListAliasesResponse> listWithHttpInfo() throws Exception {
    okhttp3.Call call = listValidateBeforeCall(null, null);
    Type localVarReturnType = new TypeToken<ListAliasesResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * List Aliases (asynchronously) Retrieve all aliases in an organization
   *
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call listAsync(final ApiCallback<ListAliasesResponse> callback) throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call = listValidateBeforeCall(progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ListAliasesResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for update
   *
   * @param workspace name of the workspace (required)
   * @param alias name of the alias (required)
   * @param body JSON object (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call updateCall(
      String workspace,
      String alias,
      UpdateAliasRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/aliases/{alias}"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()))
            .replaceAll("\\{" + "alias" + "\\}", apiClient.escapeString(alias.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call updateValidateBeforeCall(
      String workspace,
      String alias,
      UpdateAliasRequest body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception("Missing the required parameter 'workspace' when calling update(Async)");
    }

    // verify the required parameter 'alias' is set
    if (alias == null) {
      throw new Exception("Missing the required parameter 'alias' when calling update(Async)");
    }

    // verify the required parameter 'body' is set
    if (body == null) {
      throw new Exception("Missing the required parameter 'body' when calling update(Async)");
    }

    okhttp3.Call call =
        updateCall(workspace, alias, body, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Update Alias Update alias in a workspace.
   *
   * @param workspace name of the workspace (required)
   * @param alias name of the alias (required)
   * @param body JSON object (required)
   * @return GetAliasResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public GetAliasResponse update(String workspace, String alias, UpdateAliasRequest body)
      throws Exception {
    ApiResponse<GetAliasResponse> resp = updateWithHttpInfo(workspace, alias, body);
    return resp.getData();
  }

  /**
   * Update Alias Update alias in a workspace.
   *
   * @param workspace name of the workspace (required)
   * @param alias name of the alias (required)
   * @param body JSON object (required)
   * @return ApiResponse&lt;GetAliasResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<GetAliasResponse> updateWithHttpInfo(
      String workspace, String alias, UpdateAliasRequest body) throws Exception {
    okhttp3.Call call = updateValidateBeforeCall(workspace, alias, body, null, null);
    Type localVarReturnType = new TypeToken<GetAliasResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Update Alias (asynchronously) Update alias in a workspace.
   *
   * @param workspace name of the workspace (required)
   * @param alias name of the alias (required)
   * @param body JSON object (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call updateAsync(
      String workspace,
      String alias,
      UpdateAliasRequest body,
      final ApiCallback<GetAliasResponse> callback)
      throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        updateValidateBeforeCall(workspace, alias, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<GetAliasResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /**
   * Build call for workspace
   *
   * @param workspace name of the workspace (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws Exception If fail to serialize the request body object
   */
  public okhttp3.Call workspaceCall(
      String workspace,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/v1/orgs/self/ws/{workspace}/aliases"
            .replaceAll("\\{" + "workspace" + "\\}", apiClient.escapeString(workspace.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.setHttpClient(
          apiClient
              .getHttpClient()
              .newBuilder()
              .addInterceptor(
                  new okhttp3.Interceptor() {
                    @Override
                    public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain)
                        throws IOException {
                      okhttp3.Response originalResponse = chain.proceed(chain.request());
                      return originalResponse
                          .newBuilder()
                          .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                          .build();
                    }
                  })
              .build());
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private okhttp3.Call workspaceValidateBeforeCall(
      String workspace,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws Exception {

    // verify the required parameter 'workspace' is set
    if (workspace == null) {
      throw new Exception(
          "Missing the required parameter 'workspace' when calling workspace(Async)");
    }

    okhttp3.Call call = workspaceCall(workspace, progressListener, progressRequestListener);
    return call;
  }

  /**
   * List Aliases in Workspace Retrieve all aliases in a workspace.
   *
   * @param workspace name of the workspace (required)
   * @return ListAliasesResponse
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ListAliasesResponse workspace(String workspace) throws Exception {
    ApiResponse<ListAliasesResponse> resp = workspaceWithHttpInfo(workspace);
    return resp.getData();
  }

  /**
   * List Aliases in Workspace Retrieve all aliases in a workspace.
   *
   * @param workspace name of the workspace (required)
   * @return ApiResponse&lt;ListAliasesResponse&gt;
   * @throws Exception If fail to call the API, e.g. server error or cannot deserialize the response
   *     body
   */
  public ApiResponse<ListAliasesResponse> workspaceWithHttpInfo(String workspace) throws Exception {
    okhttp3.Call call = workspaceValidateBeforeCall(workspace, null, null);
    Type localVarReturnType = new TypeToken<ListAliasesResponse>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * List Aliases in Workspace (asynchronously) Retrieve all aliases in a workspace.
   *
   * @param workspace name of the workspace (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws Exception If fail to process the API call, e.g. serializing the request body object
   */
  public okhttp3.Call workspaceAsync(
      String workspace, final ApiCallback<ListAliasesResponse> callback) throws Exception {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    okhttp3.Call call =
        workspaceValidateBeforeCall(workspace, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ListAliasesResponse>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
